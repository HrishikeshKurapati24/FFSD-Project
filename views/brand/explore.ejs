<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Explore Influencers - CollabSync</title>
  <link rel="stylesheet" href="/B2_index/B2_explore.css">
</head>

<body>
  <!-- Header -->
  <header>
    <div class="header-container">
      <div class="logo">CollabSync</div>
      <nav>
        <ul>
          <li><a href="/brand/home">Home</a></li>
          <li><a href="/brand/explore">Explore Influencers</a></li>
          <li><a href="/brand/profile">My Brand Profile</a></li>
        </ul>
      </nav>
    </div>
  </header>

  <!-- Sidebar Navigation (Right Side) -->
  <button class="toggle-btn" onclick="openMenu()">☰</button>
  <div class="menu" id="navMenu">
    <span class="close-btn" onclick="closeMenu()">&times;</span>
    <a href="/brand/recievedRequests">Collab requests</a>
    <a href="/brand/create_collab">Create Collab</a>
    <a href="/brand/signout">Sign Out</a>
  </div>

  <!-- Invite Modal -->
  <div id="inviteModal" class="invite-modal" style="display: none;">
    <div class="invite-modal-content">
      <span class="invite-modal-close" onclick="closeInviteModal()">&times;</span>
      <h2 class="invite-modal-title">Invite Influencer</h2>
      <p id="inviteInfluencerName" class="invite-influencer-name"></p>

      <div class="invite-form-group">
        <label for="campaignSelect" class="invite-label">Select Campaign:</label>
        <select id="campaignSelect" class="invite-select">
          <option value="">Loading campaigns...</option>
        </select>
      </div>

      <div class="invite-modal-actions">
        <button onclick="sendInvite()" class="invite-btn-send">
          <i class="fas fa-paper-plane"></i> Send Invite
        </button>
        <button onclick="closeInviteModal()" class="invite-btn-cancel">
          Cancel
        </button>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="container">
    <div class="intro">
      <h1>Explore Influencers</h1>
      <p>Connect with top influencers to elevate your brand's presence.</p>
    </div>

    <!-- Filter Section -->
    <div class="filter-section">
      <div class="filter-controls">
        <div class="search-box">
          <input type="text" id="searchInput" placeholder="Search influencers..." value="<%= searchQuery || '' %>">
          <button type="button" onclick="applyFilters()" class="search-btn">
            <i class="fas fa-search"></i>
          </button>
        </div>
        <div class="category-filter">
          <select id="categoryFilter" onchange="applyFilters()">
            <option value="all" <%= (selectedCategory === 'all') ? 'selected' : '' %>>All Categories</option>
            <% if (categories && categories.length > 0) { %>
              <% categories.forEach(category => { %>
                <option value="<%= category %>" <%= (selectedCategory === category) ? 'selected' : '' %>>
                  <%= category %>
                </option>
              <% }); %>
            <% } %>
          </select>
        </div>
        <div class="filter-actions">
          <button type="button" onclick="clearFilters()" class="clear-btn">
            <i class="fas fa-times"></i> Clear Filters
          </button>
        </div>
      </div>
    </div>

    <!-- Results Info -->
    <div class="results-info">
      <p>Found <%= influencers ? influencers.length : 0 %> influencers
        <% if (selectedCategory && selectedCategory !== 'all') { %>
          in <strong><%= selectedCategory %></strong>
        <% } %>
        <% if (searchQuery) { %>
          matching "<strong><%= searchQuery %></strong>"
        <% } %>
      </p>
    </div>

    <!-- Toggle Button -->
    <div class="toggle-container">
      <button type="button" id="viewToggle" class="toggle-button" aria-pressed="false" aria-controls="influencerList"
        aria-label="Switch to grid view">Grid view</button>
      <span id="viewAnnouncer" class="visually-hidden" aria-live="polite"></span>
    </div>

    <!-- Influencer List -->
    <div class="influencer-list" id="influencerList">
      <% if (influencers && influencers.length> 0) { %>
        <% influencers.forEach(function(influencer) { %>
          <div class="influencer-item">
            <div class="influencer-content">
              <img class="influencer-image" loading="lazy"
                src="<%= influencer.profilePicUrl || '/images/default-profile.jpg' %>"
                alt="<%= influencer.displayName %>">
              <div class="influencer-info">
                <div class="influencer-name">
                  <h2>
                    <%= influencer.displayName %>
                  </h2>
                  <% if (influencer.verified) { %>
                    <span class="verified-badge">✓</span>
                    <% } %>
                </div>
                <div class="influencer-details">
                  <p><strong>Categories:</strong>
                    <%= influencer.categories || 'Not specified' %>
                  </p>
                  <p><strong>Followers:</strong>
                    <%= influencer.totalFollowers.toLocaleString() %>
                  </p>
                  <p><strong>Engagement Rate:</strong>
                    <%= influencer.avgEngagementRate.toFixed(2) %>%
                  </p>
                  <% if (influencer.audienceDemographics) { %>
                    <p><strong>Audience:</strong> <%= influencer.audienceDemographics.gender %>, <%= influencer.audienceDemographics.ageRange %></p>
                  <% } %>
                </div>
              </div>
            </div>
            <div class="button-group">
              <button class="invite-button" onclick="openInviteModal(' <%=influencer._id %>', '<%=influencer.displayName %>')">Invite</button>
                          <a href="/brand/influencer_profile/<%= influencer._id %>" class="profile-button">View
                            Profile</a>
                </div>
              </div>
              <% }); %>
                <% } else { %>
                  <div class="no-influencers-message" style="text-align: center; padding: 20px;">
                    <h2>No influencers found</h2>
                    <p>There are currently no influencers available for collaboration.</p>
                  </div>
                  <% } %>
            </div>
          </div>

          <!-- Scripts -->
          <script>
            let selectedInfluencerId = null;
            let selectedInfluencerName = null;

            function openMenu() {
              document.getElementById("navMenu").style.width = "250px";
            }

            function closeMenu() {
              document.getElementById("navMenu").style.width = "0";
            }

            // Open invite modal and fetch draft campaigns
            async function openInviteModal(influencerId, influencerName) {
              selectedInfluencerId = influencerId;
              selectedInfluencerName = influencerName;

              document.getElementById('inviteInfluencerName').textContent = `Inviting: ${influencerName}`;
              document.getElementById('inviteModal').style.display = 'flex';

              // Fetch draft/request campaigns for this brand
              try {
                const response = await fetch('/brand/campaigns/draft-list');
                const data = await response.json();

                const select = document.getElementById('campaignSelect');
                select.innerHTML = '';

                if (data.campaigns && data.campaigns.length > 0) {
                  select.innerHTML = '<option value="">-- Select a Campaign --</option>';
                  data.campaigns.forEach(campaign => {
                    const option = document.createElement('option');
                    option.value = campaign._id;
                    option.textContent = `${campaign.title} (Budget: $${campaign.budget.toLocaleString()})`;
                    select.appendChild(option);
                  });
                } else {
                  select.innerHTML = '<option value="">No draft campaigns available. Create one first.</option>';
                }
              } catch (error) {
                console.error('Error fetching campaigns:', error);
                document.getElementById('campaignSelect').innerHTML = '<option value="">Error loading campaigns</option>';
              }
            }

            function closeInviteModal() {
              document.getElementById('inviteModal').style.display = 'none';
              selectedInfluencerId = null;
              selectedInfluencerName = null;
            }

            // Send invite to influencer for selected campaign
            async function sendInvite() {
              const campaignId = document.getElementById('campaignSelect').value;

              if (!campaignId) {
                alert('Please select a campaign first.');
                return;
              }

              if (!selectedInfluencerId) {
                alert('Influencer not selected.');
                return;
              }

              try {
                const response = await fetch('/brand/invite-influencer', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    influencerId: selectedInfluencerId,
                    campaignId: campaignId
                  })
                });

                const data = await response.json();

                if (data.success) {
                  alert(`Invitation sent successfully to ${selectedInfluencerName}!`);
                  closeInviteModal();
                } else {
                  alert('Failed to send invite: ' + (data.message || 'Unknown error'));
                }
              } catch (error) {
                console.error('Error sending invite:', error);
                alert('An error occurred while sending the invite. Please try again.');
              }
            }

            // Close modal when clicking outside
            window.onclick = function (event) {
              const modal = document.getElementById('inviteModal');
              if (event.target === modal) {
                closeInviteModal();
              }
            }

            // Accessible, persistent view toggle
            document.addEventListener('DOMContentLoaded', function () {
              (function () {
                const containerId = 'influencerList';
                const buttonId = 'viewToggle';
                const param = 'view';

                const listEl = document.getElementById(containerId);
                const btn = document.getElementById(buttonId);
                const announce = document.getElementById('viewAnnouncer');

                if (!listEl || !btn) {
                  console.error('Required elements not found for view toggle');
                  return;
                }

                const url = (typeof URL !== 'undefined' && window.location) ? new URL(window.location.href) : null;
                const saved = (function () { try { return localStorage.getItem(`${containerId}:view`); } catch (e) { return null; } })();
                const fromUrl = url ? url.searchParams.get(param) : null;
                const initial = (fromUrl || saved || 'list');

                function setModeClass(mode) {
                  listEl.classList.remove('grid', 'list');
                  listEl.classList.add(mode);
                }

                function apply(mode) {
                  setModeClass(mode);
                  const isGrid = mode === 'grid';
                  btn.setAttribute('aria-pressed', String(isGrid));
                  btn.textContent = isGrid ? 'List view' : 'Grid view';
                  btn.setAttribute('aria-label', isGrid ? 'Switch to list view' : 'Switch to grid view');

                  if (announce) announce.textContent = isGrid ? 'Grid view' : 'List view';
                  try { localStorage.setItem(`${containerId}:view`, mode); } catch (e) { }
                }

                apply(initial);

                btn.addEventListener('click', function (e) {
                  e.preventDefault();
                  const next = listEl.classList.contains('grid') ? 'list' : 'grid';
                  apply(next);
                });
              })();
            });

            // Filter functionality
            function applyFilters() {
              const search = document.getElementById('searchInput').value;
              const category = document.getElementById('categoryFilter').value;
              
              const params = new URLSearchParams();
              if (search) params.append('search', search);
              if (category && category !== 'all') params.append('category', category);
              
              const url = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
              window.location.href = url;
            }

            function clearFilters() {
              window.location.href = window.location.pathname;
            }

            // Allow Enter key to trigger search
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
              if (e.key === 'Enter') {
                applyFilters();
              }
            });
          </script>
</body>

</html>