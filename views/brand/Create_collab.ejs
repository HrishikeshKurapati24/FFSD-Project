<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create collab</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="/i_index/brand_create_collab.css">
</head>

<body>
  <!-- Header -->
  <header class="header">
    <div class="header-container">
      <div class="logo">CollabSync</div>
      <nav>
        <ul>
          <li><a href="/brand/home">Home</a></li>
          <li><a href="/brand/explore">Explore Influencers</a></li>
          <li><a href="/brand/profile">My Brand Profile</a></li>
        </ul>
      </nav>
    </div>
  </header>

  <!-- Sidebar Navigation -->
  <button class="toggle-btn" onclick="openMenu()">â˜°</button>
  <div class="menu" id="navMenu">
    <span class="close-btn" onclick="closeMenu()">&timxes;</span>
    <a href="/brand/recievedRequests">Collab requests</a>
    <a href="/brand/create_collab">Create Collab</a>
    <a href="/brand/signout">Sign Out</a>
  </div>

  <div class="form-container">
    <h2 class="form-title"><i class="fa-solid fa-handshake"></i> Create New Campaign</h2>

    <!-- Error Message Display -->
    <% if (typeof error !== 'undefined' && error) { %>
      <div class="alert alert-danger">
        <strong>Error:</strong> <%= error %>
        <% if (typeof showUpgradeLink !== 'undefined' && showUpgradeLink) { %>
          <br><br>
          <a href="/subscription/manage" class="btn btn-upgrade">
            <i class="fas fa-crown"></i> Upgrade Your Plan
          </a>
        <% } %>
      </div>
    <% } %>

    <form id="createCollabForm" method="POST" action="/brand/campaigns/create" enctype="multipart/form-data" novalidate>
      <div class="form-group">
        <label for="title">Campaign Title</label>
        <input type="text" class="form-control" id="title" name="title"
          placeholder="Enter campaign title (max 100 characters)">
      </div>

      <div class="form-group">
        <label for="description">Campaign Description</label>
        <textarea class="form-control" id="description" name="description"
          placeholder="Describe your campaign (max 1000 characters)"></textarea>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="start_date">Start Date</label>
          <input type="date" class="form-control" id="start_date" name="start_date">
        </div>

        <div class="form-group">
          <label for="end_date">End Date</label>
          <input type="date" class="form-control" id="end_date" name="end_date">
        </div>
      </div>

      <div class="form-group">
        <label for="budget">Budget(in $)</label>
        <input type="number" class="form-control" id="budget" name="budget" min="0" placeholder="Enter budget (min 0)">
      </div>

      <div class="form-group">
        <label for="required_influencers">Number of Required Influencers</label>
        <input type="number" class="form-control" id="required_influencers" name="required_influencers" required min="1"
          max="100" step="1" placeholder="Enter number of influencers needed (1-100)">
      </div>

      <div class="form-group">
        <label for="target_audience">Target Audience</label>
        <input type="text" class="form-control" id="target_audience" name="target_audience"
          placeholder="Describe your target audience">
      </div>

      <div class="form-group">
        <label>Required Social Media Channels <span style="color: var(--danger-color);">*</span></label>
        <div class="checkbox-group">
          <div class="checkbox-item">
            <input type="checkbox" name="required_channels" value="Instagram" id="channel-instagram">
            <label for="channel-instagram">Instagram</label>
          </div>
          <div class="checkbox-item">
            <input type="checkbox" name="required_channels" value="YouTube" id="channel-youtube">
            <label for="channel-youtube">YouTube</label>
          </div>
          <div class="checkbox-item">
            <input type="checkbox" name="required_channels" value="TikTok" id="channel-tiktok">
            <label for="channel-tiktok">TikTok</label>
          </div>
          <div class="checkbox-item">
            <input type="checkbox" name="required_channels" value="Facebook" id="channel-facebook">
            <label for="channel-facebook">Facebook</label>
          </div>
          <div class="checkbox-item">
            <input type="checkbox" name="required_channels" value="Twitter" id="channel-twitter">
            <label for="channel-twitter">Twitter</label>
          </div>
          <div class="checkbox-item">
            <input type="checkbox" name="required_channels" value="LinkedIn" id="channel-linkedin">
            <label for="channel-linkedin">LinkedIn</label>
          </div>
        </div>
      </div>

      <div class="form-group">
        <label for="min_followers">Minimum Followers Required</label>
        <input type="number" class="form-control" id="min_followers" name="min_followers" min="0"
          placeholder="Enter minimum followers (min 0)">
      </div>
      <div class="form-group">
        <label for="objectives">Campaign Objectives</label>
        <textarea class="form-control" id="objectives" name="objectives"
          placeholder="State your campaign objectives (max 500 characters)"></textarea>
      </div>

      <!-- Product Details Section -->
      <div class="products-section">
        <h3 class="section-title"><i class="fa-solid fa-box"></i> Campaign Products</h3>
        <p class="section-description">Add products that influencers will promote during this campaign</p>

        <div id="products-container">
          <div class="product-item" data-index="0">
            <div class="product-header">
              <h4>Product 1</h4>
              <button type="button" class="btn-remove-product" onclick="removeProduct(0)">
                <i class="fa-solid fa-trash"></i>
              </button>
            </div>

            <div class="form-row">
              <div class="form-group">
                <label for="products[0][name]">Product Name</label>
                <input type="text" class="form-control" id="products[0][name]" name="products[0][name]"
                  placeholder="Enter product name" required>
              </div>

              <div class="form-group">
                <label for="products[0][category]">Category</label>
                <select class="form-control" id="products[0][category]" name="products[0][category]" required>
                  <option value="">Select category</option>
                  <option value="Beauty">Beauty</option>
                  <option value="Fashion">Fashion</option>
                  <option value="Electronics">Electronics</option>
                  <option value="Food & Beverage">Food & Beverage</option>
                  <option value="Health & Wellness">Health & Wellness</option>
                  <option value="Home & Garden">Home & Garden</option>
                  <option value="Sports & Fitness">Sports & Fitness</option>
                  <option value="Travel">Travel</option>
                  <option value="Other">Other</option>
                </select>
              </div>
            </div>

            <div class="form-group">
              <label for="products[0][target_quantity]">Target Quantity</label>
              <input type="number" class="form-control" id="products[0][target_quantity]"
                name="products[0][target_quantity]" min="0" placeholder="Enter target quantity" required>
            </div>

            <div class="form-row">
              <div class="form-group">
                <label for="products[0][original_price]">Original Price ($)</label>
                <input type="number" class="form-control" id="products[0][original_price]"
                  name="products[0][original_price]" min="0" step="0.01" placeholder="0.00" required>
              </div>

              <div class="form-group">
                <label for="products[0][campaign_price]">Campaign Price ($)</label>
                <input type="number" class="form-control" id="products[0][campaign_price]"
                  name="products[0][campaign_price]" min="0" step="0.01" placeholder="0.00" required>
              </div>
            </div>

            <div class="form-group">
              <label for="products[0][description]">Product Description</label>
              <textarea class="form-control" id="products[0][description]" name="products[0][description]"
                placeholder="Describe the product features and benefits" required></textarea>
            </div>

            <div class="form-row">
              <div class="form-group">
                <label for="products[0][image]">Product Image</label>
                <input type="file" class="form-control" id="products[0][image]" name="products[0][image]"
                  accept="image/*" onchange="previewImage(this, 'preview-0')">
                <div id="preview-0" class="image-preview">
                  <img src="" alt="Product preview">
                  <button type="button" onclick="removeImage('products[0][image]', 'preview-0')" class="btn-remove-image">
                    Remove
                  </button>
                </div>
              </div>
            </div>

            <div class="form-group">
              <label for="products[0][special_instructions]">Special Instructions for Influencers</label>
              <textarea class="form-control" id="products[0][special_instructions]"
                name="products[0][special_instructions]"
                placeholder="Any specific instructions for influencers promoting this product"></textarea>
            </div>
          </div>
        </div>

        <div class="add-product-container">
          <button type="button" class="btn btn-secondary" onclick="addProduct()">
            <i class="fa-solid fa-plus"></i> Add Another Product
          </button>
        </div>
      </div>

      <div class="btn-group">
        <button type="submit" class="submit-btn">Create Campaign</button>
      </div>
  </div>


  </form>
  </div>

  <footer>
    <p>&copy; 2025 CollabSync. All rights reserved.</p>
  </footer>

  <script>
    // Product management functions
    let productIndex = 1;

    function addProduct() {
      const container = document.getElementById('products-container');
      const productItem = document.createElement('div');
      productItem.className = 'product-item';
      productItem.setAttribute('data-index', productIndex);

      productItem.innerHTML = `
        <div class="product-header">
          <h4>Product ${productIndex + 1}</h4>
          <button type="button" class="btn-remove-product" onclick="removeProduct(${productIndex})">
            <i class="fa-solid fa-trash"></i>
          </button>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="products[${productIndex}][name]">Product Name</label>
            <input type="text" class="form-control" id="products[${productIndex}][name]" name="products[${productIndex}][name]" 
                   placeholder="Enter product name" required>
          </div>
          
          <div class="form-group">
            <label for="products[${productIndex}][category]">Category</label>
            <select class="form-control" id="products[${productIndex}][category]" name="products[${productIndex}][category]" required>
              <option value="">Select category</option>
              <option value="Beauty">Beauty</option>
              <option value="Fashion">Fashion</option>
              <option value="Electronics">Electronics</option>
              <option value="Food & Beverage">Food & Beverage</option>
              <option value="Health & Wellness">Health & Wellness</option>
              <option value="Home & Garden">Home & Garden</option>
              <option value="Sports & Fitness">Sports & Fitness</option>
              <option value="Travel">Travel</option>
              <option value="Other">Other</option>
            </select>
          </div>
        </div>

        <div class="form-group">
              <label for="products[${productIndex}][target_quantity]">Target Quantity</label>
              <input type="number" class="form-control" id="products[${productIndex}][target_quantity]" name="products[${productIndex}][target_quantity]" min="0"
                placeholder="Enter target quantity" required>
            </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="products[${productIndex}][original_price]">Original Price ($)</label>
            <input type="number" class="form-control" id="products[${productIndex}][original_price]" name="products[${productIndex}][original_price]" 
                   min="0" step="0.01" placeholder="0.00" required>
          </div>
          
          <div class="form-group">
            <label for="products[${productIndex}][campaign_price]">Campaign Price ($)</label>
            <input type="number" class="form-control" id="products[${productIndex}][campaign_price]" name="products[${productIndex}][campaign_price]" 
                   min="0" step="0.01" placeholder="0.00" required>
          </div>
        </div>
        
        <div class="form-group">
          <label for="products[${productIndex}][description]">Product Description</label>
          <textarea class="form-control" id="products[${productIndex}][description]" name="products[${productIndex}][description]" 
                    placeholder="Describe the product features and benefits" required></textarea>
        </div>


        
        <div class="form-row">
          <div class="form-group">
            <label for="products[${productIndex}][image]">Product Image</label>
            <input type="file" class="form-control" id="products[${productIndex}][image]" name="products[${productIndex}][image]" 
                   accept="image/*" onchange="previewImage(this, 'preview-${productIndex}')">
            <div id="preview-${productIndex}" class="image-preview">
              <img src="" alt="Product preview">
              <button type="button" onclick="removeImage('products[${productIndex}][image]', 'preview-${productIndex}')" class="btn-remove-image">
                Remove
              </button>
            </div>
          </div>
        </div>
        
        <div class="form-group">
          <label for="products[${productIndex}][special_instructions]">Special Instructions for Influencers</label>
          <textarea class="form-control" id="products[${productIndex}][special_instructions]" name="products[${productIndex}][special_instructions]" 
                    placeholder="Any specific instructions for influencers promoting this product"></textarea>
        </div>
      `;

      container.appendChild(productItem);
      productIndex++;

      // Show remove button for first product if there are multiple products
      if (productIndex > 1) {
        const firstProduct = container.querySelector('[data-index="0"] .btn-remove-product');
        if (firstProduct) {
          firstProduct.classList.remove('hidden');
        }
      }
    }

    function removeProduct(index) {
      const productItem = document.querySelector(`[data-index="${index}"]`);
      if (productItem) {
        productItem.remove();

        // Update product numbers
        const remainingProducts = document.querySelectorAll('.product-item');
        remainingProducts.forEach((item, i) => {
          const header = item.querySelector('.product-header h4');
          if (header) {
            header.textContent = `Product ${i + 1}`;
          }
        });

        // Hide remove button for first product if only one product remains
        if (remainingProducts.length === 1) {
          const firstProduct = remainingProducts[0].querySelector('.btn-remove-product');
          if (firstProduct) {
            firstProduct.classList.add('hidden');
          }
        }
      }
    }

    function openMenu() {
      document.getElementById("navMenu").style.width = "250px";
    }
    function closeMenu() {
      document.getElementById("navMenu").style.width = "0";
    }

    // Image upload and preview functions
    function previewImage(input, previewId) {
      const preview = document.getElementById(previewId);
      const file = input.files[0];

      if (file) {
        // Validate file type
        if (!file.type.startsWith('image/')) {
          alert('Please select a valid image file.');
          input.value = '';
          return;
        }

        // Validate file size (max 5MB)
        if (file.size > 5 * 1024 * 1024) {
          alert('Image size must be less than 5MB.');
          input.value = '';
          return;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
          const img = preview.querySelector('img');
          img.src = e.target.result;
          preview.classList.remove('hidden');
        };
        reader.readAsDataURL(file);
      } else {
        preview.classList.add('hidden');
      }
    }

    function removeImage(inputId, previewId) {
      const input = document.getElementById(inputId);
      const preview = document.getElementById(previewId);

      input.value = '';
      preview.classList.add('hidden');
    }

    // Form validation with same styling as influencer profile modal
    document.getElementById('createCollabForm').addEventListener('submit', function (e) {
      e.preventDefault();

      // --- Validation helpers (same styling as profile modal) ---
      function getOrCreateErrorEl(targetEl, idSuffix) {
        const id = targetEl.id ? `${targetEl.id}-${idSuffix}` : `${idSuffix}`;
        let el = document.getElementById(id);
        if (!el) {
          el = document.createElement('small');
          el.id = id;
          el.className = 'form-text error-inline';
          el.setAttribute('aria-live', 'polite');
          if (targetEl.parentElement) {
            targetEl.parentElement.appendChild(el);
          } else if (targetEl.appendChild) {
            targetEl.appendChild(el);
          }
        }
        return el;
      }

      function setError(targetEl, message, idSuffix = 'error') {
        const el = getOrCreateErrorEl(targetEl, idSuffix);
        el.textContent = message || '';
        if (message) {
          targetEl.setAttribute('aria-invalid', 'true');
          el.classList.remove('hidden');
          el.classList.add('error-inline');
          if (targetEl.tagName === 'INPUT' || targetEl.tagName === 'TEXTAREA' || targetEl.tagName === 'SELECT') {
            targetEl.classList.add('error-input');
          }
        } else {
          targetEl.removeAttribute('aria-invalid');
          el.classList.add('hidden');
          el.classList.remove('error-inline');
          if (targetEl.tagName === 'INPUT' || targetEl.tagName === 'TEXTAREA' || targetEl.tagName === 'SELECT') {
            targetEl.classList.remove('error-input');
          }
        }
        return Boolean(message);
      }

      function clearAllErrors() {
        const inputs = document.querySelectorAll('#createCollabForm input, #createCollabForm textarea, #createCollabForm select');
        inputs.forEach(el => setError(el, ''));
      }

      clearAllErrors();
      let hasErrors = false;

      // Get form elements
      const title = document.getElementById('title');
      const description = document.getElementById('description');
      const startDate = document.getElementById('start_date');
      const endDate = document.getElementById('end_date');
      const budget = document.getElementById('budget');
      const targetAudience = document.getElementById('target_audience');
      const minFollowers = document.getElementById('min_followers');
      const objectives = document.getElementById('objectives');
      const channels = document.querySelectorAll('input[name="required_channels"]');
      const requiredInfluencers = document.getElementById('required_influencers');
      const productsContainer = document.getElementById('products-container');
      const productItems = Array.from(document.querySelectorAll('#products-container .product-item'));

      // --- Content validation helpers ---
      function containsVulgarContent(text) {
        const vulgarWords = [
          'fuck', 'shit', 'damn', 'bitch', 'ass', 'hell', 'crap', 'piss', 'dick', 'pussy',
          'fucking', 'shitty', 'damned', 'bitchy', 'asshole', 'hellish', 'crappy', 'pissy',
          'fucker', 'shitter', 'damner', 'bitchy', 'asshole', 'heller', 'crapper', 'pisser'
        ];
        const lowerText = text.toLowerCase();
        return vulgarWords.some(word => lowerText.includes(word));
      }

      function isVagueContent(text, fieldName) {
        const vaguePatterns = [
          /^(www|http|https|\.com|\.org|\.net)/i, // URLs
          /^(test|testing|sample|example|demo|dummy|placeholder)/i, // Test content
          /^(asdf|qwerty|123|abc|xyz)/i, // Keyboard patterns
          /^(lorem|ipsum|dolor|sit|amet)/i, // Lorem ipsum
          /^[0-9\s\-_\.]+$/, // Only numbers and separators
          /^[a-z\s\-_\.]+$/i, // Only letters and separators (too simple)
          /^(.)\1{4,}/, // Repeated characters (aaaaa, 11111)
          /^.{1,3}$/ // Too short for meaningful content
        ];

        return vaguePatterns.some(pattern => pattern.test(text.trim()));
      }

      function hasMinimumMeaningfulContent(text, minWords = 2) {
        const words = text.trim().split(/\s+/).filter(word => word.length > 2);
        return words.length >= minWords;
      }

      // --- Validation rules ---

      // Campaign Title: required, max 100 characters, meaningful content
      if (!title.value.trim()) {
        hasErrors = setError(title, 'Campaign title is required') || hasErrors;
      } else if (title.value.length > 100) {
        hasErrors = setError(title, 'Campaign title must be 100 characters or less') || hasErrors;
      } else if (containsVulgarContent(title.value)) {
        hasErrors = setError(title, 'Campaign title contains inappropriate content') || hasErrors;
      }
      //else if (isVagueContent(title.value, 'title')) {
      //   hasErrors = setError(title, 'Please provide a meaningful campaign title (avoid URLs, test content, or placeholder text)') || hasErrors;
      // }
      else if (!hasMinimumMeaningfulContent(title.value, 2)) {
        hasErrors = setError(title, 'Campaign title must contain at least 2 meaningful words') || hasErrors;
      } else {
        setError(title, '');
      }

      // Campaign Description: required, max 1000 characters, meaningful content
      if (!description.value.trim()) {
        hasErrors = setError(description, 'Campaign description is required') || hasErrors;
      } else if (description.value.length > 1000) {
        hasErrors = setError(description, 'Campaign description must be 1000 characters or less') || hasErrors;
      }
      // else if (containsVulgarContent(description.value)) {
      //   hasErrors = setError(description, 'Campaign description contains inappropriate content') || hasErrors;
      // }
      // else if (isVagueContent(description.value, 'description')) {
      //  hasErrors = setError(description, 'Please provide a meaningful campaign description (avoid URLs, test content, or placeholder text)') || hasErrors;
      // } 
      else if (!hasMinimumMeaningfulContent(description.value, 5)) {
        hasErrors = setError(description, 'Campaign description must contain at least 5 meaningful words') || hasErrors;
      } else {
        setError(description, '');
      }

      // Start Date: required
      if (!startDate.value) {
        hasErrors = setError(startDate, 'Start date is required') || hasErrors;
      } else {
        setError(startDate, '');
      }

      // End Date: required
      if (!endDate.value) {
        hasErrors = setError(endDate, 'End date is required') || hasErrors;
      } else {
        setError(endDate, '');
      }

      // Date validation: end date should be after start date
      if (startDate.value && endDate.value) {
        const start = new Date(startDate.value);
        const end = new Date(endDate.value);
        if (end <= start) {
          hasErrors = setError(endDate, 'End date must be after start date') || hasErrors;
        }
      }

      // Budget: required, min 0
      if (!budget.value) {
        hasErrors = setError(budget, 'Budget is required') || hasErrors;
      } else if (parseFloat(budget.value) < 0) {
        hasErrors = setError(budget, 'Budget must be 0 or greater') || hasErrors;
      } else {
        setError(budget, '');
      }

      // Target Audience: required, meaningful content
      if (!targetAudience.value.trim()) {
        hasErrors = setError(targetAudience, 'Target audience is required') || hasErrors;
      } else if (containsVulgarContent(targetAudience.value)) {
        hasErrors = setError(targetAudience, 'Target audience description contains inappropriate content') || hasErrors;
      } else if (isVagueContent(targetAudience.value, 'target audience')) {
        hasErrors = setError(targetAudience, 'Please provide a meaningful target audience description (avoid URLs, test content, or placeholder text)') || hasErrors;
      }
      // else if (!hasMinimumMeaningfulContent(targetAudience.value, 3)) {
      //  hasErrors = setError(targetAudience, 'Target audience description must contain at least 3 meaningful words') || hasErrors;
      // }
      else {
        setError(targetAudience, '');
      }

      // Required Social Media Channels: at least one required
      const checkedChannels = Array.from(channels).filter(ch => ch.checked);
      if (checkedChannels.length === 0) {
        const channelGroup = document.querySelector('.checkbox-group');
        hasErrors = setError(channelGroup, 'Please select at least one social media channel') || hasErrors;
      } else {
        const channelGroup = document.querySelector('.checkbox-group');
        setError(channelGroup, '');
      }

      // Minimum Followers: required, min 0
      if (!minFollowers.value) {
        hasErrors = setError(minFollowers, 'Minimum followers is required') || hasErrors;
      } else if (parseInt(minFollowers.value) < 0) {
        hasErrors = setError(minFollowers, 'Minimum followers must be 0 or greater') || hasErrors;
      } else {
        setError(minFollowers, '');
      }

      // Required Influencers: required, min 1, max 100
      if (!requiredInfluencers.value) {
        hasErrors = setError(requiredInfluencers, 'Number of required influencers is required') || hasErrors;
      } else {
        const numInfluencers = parseInt(requiredInfluencers.value);
        if (isNaN(numInfluencers)) {
          hasErrors = setError(requiredInfluencers, 'Please enter a valid number') || hasErrors;
        } else if (numInfluencers < 1) {
          hasErrors = setError(requiredInfluencers, 'You must require at least 1 influencer') || hasErrors;
        } else if (numInfluencers > 100) {
          hasErrors = setError(requiredInfluencers, 'You cannot require more than 100 influencers') || hasErrors;
        } else if (!Number.isInteger(parseFloat(requiredInfluencers.value))) {
          hasErrors = setError(requiredInfluencers, 'Number of influencers must be a whole number') || hasErrors;
        } else {
          setError(requiredInfluencers, '');
        }
      }

      // Campaign Objectives: required, max 500 characters, meaningful content
      if (!objectives.value.trim()) {
        hasErrors = setError(objectives, 'Campaign objectives are required') || hasErrors;
      } else if (objectives.value.length > 500) {
        hasErrors = setError(objectives, 'Campaign objectives must be 500 characters or less') || hasErrors;
      } else if (containsVulgarContent(objectives.value)) {
        hasErrors = setError(objectives, 'Campaign objectives contain inappropriate content') || hasErrors;
      }
      // else if (isVagueContent(objectives.value, 'objectives')) {
      //    hasErrors = setError(objectives, 'Please provide meaningful campaign objectives (avoid URLs, test content, or placeholder text)') || hasErrors;
      // }
      else if (!hasMinimumMeaningfulContent(objectives.value, 4)) {
        hasErrors = setError(objectives, 'Campaign objectives must contain at least 4 meaningful words') || hasErrors;
      } else {
        setError(objectives, '');
      }

      // Products validation: at least 1, and validate fields per product
      if (productItems.length === 0) {
        hasErrors = true;
        alert('Please add at least one product for the campaign.');
      } else {
        productItems.forEach((item, index) => {
          // for each product block, validate required fields
          const nameInput = item.querySelector('input[id*="[name]"]');
          const categorySelect = item.querySelector('select[id*="[category]"]');
          const targetQuantityInput = item.querySelector('input[id*="[target_quantity]"]');
          const originalPriceInput = item.querySelector('input[id*="[original_price]"]');
          const campaignPriceInput = item.querySelector('input[id*="[campaign_price]"]');
          const descriptionInput = item.querySelector('textarea[id*="[description]"]');
          const imageInput = item.querySelector('input[id*="[image]"]');

          // Product name validation
          if (!nameInput || !nameInput.value.trim()) {
            hasErrors = setError(nameInput, 'Product name is required') || hasErrors;
          } else if (containsVulgarContent(nameInput.value)) {
            hasErrors = setError(nameInput, 'Product name contains inappropriate content') || hasErrors;
          } else if (!hasMinimumMeaningfulContent(nameInput.value, 2)) {
            hasErrors = setError(nameInput, 'Product name must contain at least 2 meaningful words') || hasErrors;
          } else {
            setError(nameInput, '');
          }

          // Category validation
          if (!categorySelect || !categorySelect.value) {
            hasErrors = setError(categorySelect, 'Please select a category') || hasErrors;
          } else {
            setError(categorySelect, '');
          }

          // Target quantity validation
          if (!targetQuantityInput || !targetQuantityInput.value.trim()) {
            hasErrors = setError(targetQuantityInput, 'Target quantity is required') || hasErrors;
          } else if (parseInt(targetQuantityInput.value) < 0) {
            hasErrors = setError(targetQuantityInput, 'Target quantity must be 0 or greater') || hasErrors;
          } else {
            setError(targetQuantityInput, '');
          }
          // Original price validation
          const opVal = originalPriceInput && originalPriceInput.value !== '' ? parseFloat(originalPriceInput.value) : NaN;
          if (!originalPriceInput || isNaN(opVal) || opVal <= 0) {
            hasErrors = setError(originalPriceInput, 'Original price must be greater than 0') || hasErrors;
          } else {
            setError(originalPriceInput, '');
          }

          // Campaign price validation
          const cpVal = campaignPriceInput && campaignPriceInput.value !== '' ? parseFloat(campaignPriceInput.value) : NaN;
          if (!campaignPriceInput || isNaN(cpVal) || cpVal <= 0) {
            hasErrors = setError(campaignPriceInput, 'Campaign price must be greater than 0') || hasErrors;
          } else if (!isNaN(opVal) && cpVal >= opVal) {
            hasErrors = setError(campaignPriceInput, 'Campaign price must be less than original price') || hasErrors;
          } else {
            setError(campaignPriceInput, '');
          }

          // Product description validation
          if (!descriptionInput || !descriptionInput.value.trim()) {
            hasErrors = setError(descriptionInput, 'Product description is required') || hasErrors;
            // } else if (containsVulgarContent(descriptionInput.value)) {
            //   hasErrors = setError(descriptionInput, 'Product description contains inappropriate content') || hasErrors;
            // } else if (!hasMinimumMeaningfulContent(descriptionInput.value, 5)) {
            //   hasErrors = setError(descriptionInput, 'Product description must contain at least 5 meaningful words') || hasErrors;
            // }
          } else {
            setError(descriptionInput, '');
          }

          // Product image validation
          if (!imageInput || !imageInput.files || !imageInput.files[0]) {
            hasErrors = setError(imageInput, 'Product image is required') || hasErrors;
          } else {
            const imageFile = imageInput.files[0];
            // Validate file type
            const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
            if (!validTypes.includes(imageFile.type)) {
              hasErrors = setError(imageInput, 'Please select a valid image file (JPG, PNG, or GIF)') || hasErrors;
            }
            // Validate file size (5MB)
            else if (imageFile.size > 5 * 1024 * 1024) {
              hasErrors = setError(imageInput, 'Image must be less than 5MB') || hasErrors;
            } else {
              setError(imageInput, '');
            }
          }
        });
      }

      if (hasErrors) {
        const firstInvalid = document.querySelector('[aria-invalid="true"]');
        if (firstInvalid && typeof firstInvalid.focus === 'function') firstInvalid.focus();
        return;
      }

      // If validation passes, submit the form
      this.submit();
    });
  </script>
</body>

</html>