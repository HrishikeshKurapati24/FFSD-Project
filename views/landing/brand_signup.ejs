<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Brand Sign Up - CollabSync</title>
  <link rel="stylesheet" href="/landing/brand_signup.css">
</head>

<body>
  <div class="signup-container">
    <!-- 🧾 Form Section -->
    <div class="form-container">
      <div class="logo">CollabSync</div>
      <h1>Brand Sign Up</h1>

      <form id="brandSignupForm" action="/signup-form-brand" method="post" novalidate>
        <div id="messageBox" class="message"></div>

        <div class="form-group">
          <label for="brandName">Brand Name</label>
          <input type="text" id="brandName" name="brandName" placeholder="Your Brand Name" />
          <small id="brandNameError" class="error-text"></small>
        </div>

        <div class="form-group">
          <label for="email">Email</label>
          <input type="text" id="email" name="email" placeholder="Your Email" />
          <small id="emailError" class="error-text"></small>
        </div>

        <div class="form-group">
          <label for="password">Password</label>
          <input type="password" id="password" name="password"
            placeholder="At least 8 chars, one digit, one special char" />
          <small id="passwordError" class="error-text"></small>
        </div>

        <div class="form-group">
          <label for="industry">Industry</label>
          <input type="text" id="industry" name="industry" placeholder="Your Industry" />
          <small id="industryError" class="error-text"></small>
        </div>

        <div class="form-group">
          <label for="website">Website</label>
          <input type="text" id="website" name="website" placeholder="Your Website URL" />
          <small id="websiteError" class="error-text"></small>
        </div>

        <div class="form-group">
          <label for="totalAudience">Total Audience</label>
          <input type="number" id="totalAudience" name="totalAudience" placeholder="Total Audience" min="0" value="0" />
          <small id="totalAudienceError" class="error-text"></small>
        </div>

        <div class="form-group">
          <label for="phone">Contact Number</label>
          <input type="text" id="phone" name="phone" placeholder="+1234567890" />
          <small id="phoneError" class="error-text"></small>
        </div>

        <button type="submit">Sign Up as Brand</button>
      </form>

      <a href="/Sup_role" class="back-link">Back to Role Selection</a>
    </div>

    <!-- 🖼️ Image Section -->
    <div class="image-container">
      <img src="/Sign/SighUp_for_both.svg" alt="Sign Up Illustration" />
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const form = document.getElementById('brandSignupForm');
      const messageBox = document.getElementById('messageBox');
      const submitBtn = form.querySelector('button');

      // Get all form elements
      const brandNameInput = document.getElementById('brandName');
      const emailInput = document.getElementById('email');
      const passwordInput = document.getElementById('password');
      const industryInput = document.getElementById('industry');
      const websiteInput = document.getElementById('website');
      const totalAudienceInput = document.getElementById('totalAudience');
      const phoneInput = document.getElementById('phone');

      // Get error elements
      const brandNameError = document.getElementById('brandNameError');
      const emailError = document.getElementById('emailError');
      const passwordError = document.getElementById('passwordError');
      const industryError = document.getElementById('industryError');
      const websiteError = document.getElementById('websiteError');
      const totalAudienceError = document.getElementById('totalAudienceError');
      const phoneError = document.getElementById('phoneError');

      // Get character count elements
      const brandNameCount = document.getElementById('brandNameCount');
      const industryCount = document.getElementById('industryCount');

      function showMessage(message, type) {
        messageBox.textContent = message;
        messageBox.className = `message ${type}`;
        messageBox.style.display = 'block';

        if (type === 'success') {
          setTimeout(() => {
            messageBox.style.display = 'none';
          }, 3000);
        }
      }

      // Validation functions
      function validateBrandName(value) {
        if (!value) return 'Brand name is required';
        if (value.length < 2) return 'Brand name must be at least 2 characters';
        if (value.length > 50) return 'Brand name cannot exceed 50 characters';
        if (!/^[a-zA-Z0-9\s&.-]+$/.test(value)) return 'Brand name can only contain letters, numbers, spaces, &, dots, and hyphens';

        // Check for vague inputs
        const vaguePatterns = [
          /^(test|testing|demo|sample|example|asdf|qwerty|123|abc|xyz)$/i,
          /^(brand|company|business|corp|corporation)$/i,
          /^(user|admin|guest|temp|temporary)$/i,
          /^(name|brandname|companyname)$/i,
          /^[a-z]{1,3}$/i, // Single letters or very short strings
          /^[0-9]+$/, // Only numbers
          /^(.)\1+$/, // Repeated characters like "aaaa", "bbbb"
          /^(my|the|a|an)\s+(brand|company|business)$/i // "my brand", "the company", etc.
        ];

        if (vaguePatterns.some(pattern => pattern.test(value.trim()))) {
          return 'Please enter a real brand name';
        }

        return '';
      }

      function validateEmail(value) {
        const emailRegex = /^[\w.!#$%&'*+/=?^`{|}~-]+@[\w-]+(?:\.[\w-]+)+$/;
        if (!value) return 'Email is required';
        if (!emailRegex.test(value)) return 'Enter a valid email address';

        // Check for vague/test email patterns
        const vagueEmailPatterns = [
          /^(test|testing|demo|sample|example|asdf|qwerty|123|abc|xyz)@/i,
          /^(user|admin|guest|temp|temporary)@/i,
          /^(email|mail|contact)@/i,
          /@(test|testing|demo|sample|example|localhost|temp|temporary)\./i,
          /@(test|testing|demo|sample|example)\.(com|org|net)$/i,
          /^(.)\1+@/i, // Repeated characters before @
          /@(.)\1+\./i // Repeated characters in domain
        ];

        if (vagueEmailPatterns.some(pattern => pattern.test(value.trim()))) {
          return 'Please enter a real email address';
        }

        return '';
      }

      function validatePassword(value) {
        if (!value) return 'Password is required';
        if (value.length < 8) return 'Password must be at least 8 characters';
        if (!/[0-9]/.test(value)) return 'Password must include at least one digit';
        if (!/[^A-Za-z0-9]/.test(value)) return 'Password must include at least one special character';
        return '';
      }

      function validateIndustry(value) {
        if (!value) return 'Industry is required';
        if (value.length < 2) return 'Industry must be at least 2 characters';
        if (value.length > 50) return 'Industry cannot exceed 50 characters';

        // Check for vague inputs
        const vaguePatterns = [
          /^(test|testing|demo|sample|example|asdf|qwerty|123|abc|xyz)$/i,
          /^(industry|sector|field|area|domain)$/i,
          /^(general|other|misc|miscellaneous)$/i,
          /^[a-z]{1,2}$/i, // Very short strings
          /^[0-9]+$/, // Only numbers
          /^(.)\1+$/, // Repeated characters
          /^(stuff|things|random|whatever|business)$/i,
          /^(my|the|a|an)\s+(industry|business|field)$/i // "my industry", "the business", etc.
        ];

        if (vaguePatterns.some(pattern => pattern.test(value.trim()))) {
          return 'Please enter a specific industry';
        }

        return '';
      }

      function validateWebsite(value) {
        if (!value) return 'Website is required';
        const urlRegex = /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$/;
        if (!urlRegex.test(value)) return 'Please enter a valid website URL (e.g., https://example.com)';
        return '';
      }

      function validateTotalAudience(value) {
        if (!value) return 'Total audience is required';
        const num = parseInt(value, 10);
        if (isNaN(num)) return 'Total audience must be a valid number';
        if (num < 0) return 'Total audience cannot be negative';
        if (num > 1000000000) return 'Total audience cannot exceed 1,000,000,000';
        return '';
      }

      function validatePhone(value) {
        if (!value) return 'Contact number is required';

        // Remove all non-digit characters for length check
        const digitsOnly = value.replace(/\D/g, '');

        // Check if it has at least 10 digits
        if (digitsOnly.length < 10) return 'Phone number must have at least 10 digits';
        if (digitsOnly.length > 15) return 'Phone number cannot exceed 15 digits';

        // Check format (allows + at start, then digits)
        const phoneRegex = /^\+?[1-9]\d{9,14}$/;
        if (!phoneRegex.test(value)) return 'Please enter a valid phone number format';

        // Check for vague/test phone patterns
        const vaguePhonePatterns = [
          /^(\d)\1{9,}$/, // All same digits like 1111111111, 2222222222
          /^123456789\d*$/, // Starting with 123456789
          /^000000000\d*$/, // Starting with 000000000
          /^111111111\d*$/, // Starting with 111111111
          /^(\d{3})\1{2,}$/, // Repeated 3-digit patterns
          /^(\d{2})\1{4,}$/ // Repeated 2-digit patterns
        ];

        if (vaguePhonePatterns.some(pattern => pattern.test(digitsOnly))) {
          return 'Please enter a real phone number';
        }

        return '';
      }

      function setFieldState(inputEl, errorEl, errorMsg) {
        errorEl.textContent = errorMsg || '';
        if (errorMsg) {
          inputEl.classList.add('invalid');
          inputEl.setAttribute('aria-invalid', 'true');
          errorEl.style.display = 'block';
        } else {
          inputEl.classList.remove('invalid');
          inputEl.removeAttribute('aria-invalid');
          errorEl.style.display = 'none';
        }
      }

      function markAsTouched(inputEl) {
        inputEl.classList.add('touched');
      }

      function updateSubmitState() {
        const brandNameMsg = validateBrandName(brandNameInput.value.trim());
        const emailMsg = validateEmail(emailInput.value.trim());
        const passwordMsg = validatePassword(passwordInput.value);
        const industryMsg = validateIndustry(industryInput.value.trim());
        const websiteMsg = validateWebsite(websiteInput.value.trim());
        const totalAudienceMsg = validateTotalAudience(totalAudienceInput.value);
        const phoneMsg = validatePhone(phoneInput.value.trim());

        const hasErrors = Boolean(brandNameMsg || emailMsg || passwordMsg || industryMsg || websiteMsg || totalAudienceMsg || phoneMsg);

        submitBtn.disabled = hasErrors;
        return hasErrors;
      }

      // Live validation for all fields
      brandNameInput.addEventListener('input', (e) => {
        // Enforce character limit
        if (e.target.value.length > 50) {
          e.target.value = e.target.value.slice(0, 50);
        }

        markAsTouched(brandNameInput);
        const msg = validateBrandName(brandNameInput.value.trim());
        setFieldState(brandNameInput, brandNameError, msg);
        updateSubmitState();

        // Update character count
        const charCount = brandNameInput.value.length;
        brandNameCount.textContent = `${charCount}/50 characters`;
      });

      emailInput.addEventListener('input', () => {
        markAsTouched(emailInput);
        const msg = validateEmail(emailInput.value.trim());
        setFieldState(emailInput, emailError, msg);
        updateSubmitState();
      });

      passwordInput.addEventListener('input', () => {
        markAsTouched(passwordInput);
        const msg = validatePassword(passwordInput.value);
        setFieldState(passwordInput, passwordError, msg);
        updateSubmitState();
      });

      industryInput.addEventListener('input', (e) => {
        // Enforce character limit
        if (e.target.value.length > 50) {
          e.target.value = e.target.value.slice(0, 50);
        }

        markAsTouched(industryInput);
        const msg = validateIndustry(industryInput.value.trim());
        setFieldState(industryInput, industryError, msg);
        updateSubmitState();

        // Update character count
        const charCount = industryInput.value.length;
        industryCount.textContent = `${charCount}/50 characters`;
      });

      websiteInput.addEventListener('input', () => {
        markAsTouched(websiteInput);
        const msg = validateWebsite(websiteInput.value.trim());
        setFieldState(websiteInput, websiteError, msg);
        updateSubmitState();
      });

      totalAudienceInput.addEventListener('input', (e) => {
        // Enforce numeric constraints
        let value = e.target.value;
        if (value && !isNaN(value)) {
          const numValue = parseInt(value, 10);
          if (numValue < 0) {
            e.target.value = '0';
          } else if (numValue > 1000000000) {
            e.target.value = '1000000000';
          }
        }

        markAsTouched(totalAudienceInput);
        const msg = validateTotalAudience(totalAudienceInput.value);
        setFieldState(totalAudienceInput, totalAudienceError, msg);
        updateSubmitState();
      });

      phoneInput.addEventListener('input', () => {
        markAsTouched(phoneInput);
        const msg = validatePhone(phoneInput.value.trim());
        setFieldState(phoneInput, phoneError, msg);
        updateSubmitState();
      });

      // Add blur event listeners to mark fields as touched
      [brandNameInput, emailInput, passwordInput, industryInput, websiteInput, totalAudienceInput, phoneInput].forEach(input => {
        input.addEventListener('blur', () => {
          markAsTouched(input);
        });
      });

      // Initial state
      updateSubmitState();

      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        // Final validation before submit
        const brandNameMsg = validateBrandName(brandNameInput.value.trim());
        const emailMsg = validateEmail(emailInput.value.trim());
        const passwordMsg = validatePassword(passwordInput.value);
        const industryMsg = validateIndustry(industryInput.value.trim());
        const websiteMsg = validateWebsite(websiteInput.value.trim());
        const totalAudienceMsg = validateTotalAudience(totalAudienceInput.value);
        const phoneMsg = validatePhone(phoneInput.value.trim());

        // Set all field states
        setFieldState(brandNameInput, brandNameError, brandNameMsg);
        setFieldState(emailInput, emailError, emailMsg);
        setFieldState(passwordInput, passwordError, passwordMsg);
        setFieldState(industryInput, industryError, industryMsg);
        setFieldState(websiteInput, websiteError, websiteMsg);
        setFieldState(totalAudienceInput, totalAudienceError, totalAudienceMsg);
        setFieldState(phoneInput, phoneError, phoneMsg);

        const hasErrors = Boolean(brandNameMsg || emailMsg || passwordMsg || industryMsg || websiteMsg || totalAudienceMsg || phoneMsg);

        if (hasErrors) {
          showMessage('Please fix all errors before submitting', 'error');
          return;
        }

        submitBtn.disabled = true;
        submitBtn.textContent = 'Creating Account...';

        // ========================================
        // FUNCTIONALITY 1: USER AUTHENTICATION - BRAND SIGNUP
        // ========================================
        // Asynchronous user registration for brands
        // - Collects brand-specific data including industry and budget
        // - Validates all form fields before submission
        // - Sends registration data to server via POST request
        // - Handles success/error responses asynchronously
        // - Provides user feedback and redirects on success
        try {
          const data = {
            brandName: brandNameInput.value.trim(),
            email: emailInput.value.trim(),
            password: passwordInput.value,
            industry: industryInput.value.trim(),
            website: document.getElementById('website').value.trim(),
            totalAudience: parseInt(document.getElementById('totalAudience').value, 10) || 0,
            phone: phoneInput.value.trim(),
          };

          console.log('Sending data to server:', data);

          // Asynchronous registration request
          const response = await fetch('/signup-form-brand', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
          });

          console.log('Response status:', response.status);

          if (!response.ok) {
            const result = await response.json();
            throw new Error(result.message || 'Failed to create account');
          }

          const result = await response.json();
          console.log('Response data:', result);

          showMessage('Account created successfully! Redirecting to plan selection...', 'success');
          // Redirect after successful registration
          setTimeout(() => {
            if (result.redirectTo) {
              window.location.href = result.redirectTo;
            } else {
              window.location.href = '/signin';
            }
          }, 2000);
        } catch (error) {
          console.error('Error:', error);
          showMessage(error.message || 'An error occurred. Please try again.', 'error');
        } finally {
          submitBtn.disabled = false;
          submitBtn.textContent = 'Sign Up as Brand';
        }
      });
    });
  </script>
</body>

</html>