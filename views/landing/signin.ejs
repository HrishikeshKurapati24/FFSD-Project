<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sign In - CollabSync</title>
  <style>
    /* Modern Reset */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :root {
      --light-gray: #f0f0f0;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background-color: var(--light-gray);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
      position: relative;
      overflow: hidden;
    }

    /* Animated background particles */
    body::before {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      background-image: none;
      animation: float 20s ease-in-out infinite;
    }

    @keyframes float {
      0%, 100% { transform: translate(0, 0); }
      50% { transform: translate(30px, -30px); }
    }

    /* Floating orbs */
    .orb {
      position: absolute;
      border-radius: 50%;
      filter: blur(60px);
      opacity: 0;
      animation: drift 15s ease-in-out infinite;
    }

    .orb-1 {
      width: 300px;
      height: 300px;
      background: linear-gradient(135deg, #007bff, #0056b3);
      top: -150px;
      left: -150px;
      animation-delay: 0s;
    }

    .orb-2 {
      width: 250px;
      height: 250px;
      background: linear-gradient(135deg, #007bff, #004085);
      bottom: -125px;
      right: -125px;
      animation-delay: 5s;
    }

    @keyframes drift {
      0%, 100% { transform: translate(0, 0) scale(1); }
      50% { transform: translate(50px, 50px) scale(1.1); }
    }

    /* Main container */
    .signin-container {
      display: flex;
      max-width: 1200px;
      width: 100%;
      background: rgba(255, 255, 255, 0.03);
      backdrop-filter: blur(20px) saturate(180%);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 28px;
      overflow: hidden;
      box-shadow: 
        0 40px 80px rgba(0, 0, 0, 0.5),
        0 0 0 1px rgba(255, 255, 255, 0.05) inset,
        0 4px 6px rgba(0, 0, 0, 0.2);
      position: relative;
      z-index: 1;
      min-height: 650px;
    }

    /* Form container */
    .form-container {
      flex: 1;
      padding: 70px 60px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      background: linear-gradient(135deg, rgba(255, 255, 255, 0.98) 0%, rgba(255, 255, 255, 0.95) 100%);
      position: relative;
    }

    .form-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 4px;
      height: 100%;
      background: linear-gradient(180deg, #007bff, #0056b3, #004085);
    }

    .logo {
      font-size: 28px;
      font-weight: 800;
      background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 40px;
      letter-spacing: -1px;
    }

    .form-container h1 {
      font-size: 38px;
      font-weight: 800;
      color: #000000;
      margin-bottom: 12px;
      letter-spacing: -1.5px;
      line-height: 1.2;
    }

    .form-container h2 {
      font-size: 16px;
      font-weight: 400;
      color: #666666;
      margin-bottom: 48px;
      line-height: 1.6;
    }

    .form-group {
      margin-bottom: 28px;
      position: relative;
    }

    .form-container label {
      display: block;
      font-size: 14px;
      font-weight: 600;
      color: #333333;
      margin-bottom: 10px;
      letter-spacing: 0.2px;
    }

    .input-wrapper {
      position: relative;
    }

    .form-container input[type="email"],
    .form-container input[type="password"] {
      width: 100%;
      padding: 16px 18px;
      font-size: 15px;
      border: 2px solid #e0e0e0;
      border-radius: 14px;
      background: #f5f5f5;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      color: #000000;
      font-family: inherit;
      font-weight: 500;
    }

    .form-container input[type="email"]:hover,
    .form-container input[type="password"]:hover {
      border-color: #cccccc;
      background: #ffffff;
    }

    .form-container input[type="email"]:focus,
    .form-container input[type="password"]:focus {
      outline: none;
      border-color: #007bff;
      background: #ffffff;
      box-shadow: 
        0 0 0 4px rgba(0, 123, 255, 0.1),
        0 1px 2px rgba(0, 0, 0, 0.05);
      transform: translateY(-1px);
    }

    .form-container input[type="email"]::placeholder,
    .form-container input[type="password"]::placeholder {
      color: #999999;
      font-weight: 400;
    }

    .form-container button {
      width: 100%;
      padding: 18px;
      font-size: 16px;
      font-weight: 700;
      background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
      color: #ffffff;
      border: none;
      border-radius: 14px;
      cursor: pointer;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      margin-top: 12px;
      letter-spacing: 0.5px;
      position: relative;
      overflow: hidden;
      box-shadow: 0 10px 30px rgba(0, 123, 255, 0.3);
    }

    .form-container button::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.6s;
    }

    .form-container button:hover:not(:disabled)::before {
      left: 100%;
    }

    .form-container button:hover:not(:disabled) {
      transform: translateY(-3px);
      box-shadow: 
        0 20px 40px rgba(0, 123, 255, 0.4),
        0 0 0 4px rgba(0, 123, 255, 0.1);
    }

    .form-container button:active:not(:disabled) {
      transform: translateY(-1px);
    }

    .form-container button:disabled {
      background: linear-gradient(135deg, #cccccc 0%, #999999 100%);
      cursor: not-allowed;
      opacity: 0.7;
      box-shadow: none;
    }

    /* Image container */
    .image-container {
      flex: 1;
      background: linear-gradient(135deg, #007bff 0%, #0056b3 50%, #004085 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 60px;
      position: relative;
      overflow: hidden;
    }

    .image-container::before {
      content: '';
      position: absolute;
      width: 150%;
      height: 150%;
      background: 
        repeating-linear-gradient(
          45deg,
          transparent,
          transparent 20px,
          rgba(255, 255, 255, 0.03) 20px,
          rgba(255, 255, 255, 0.03) 40px
        );
      animation: slide 30s linear infinite;
    }

    @keyframes slide {
      0% { transform: translate(0, 0); }
      100% { transform: translate(40px, 40px); }
    }

    .image-container::after {
      content: '';
      position: absolute;
      width: 400px;
      height: 400px;
      background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
      border-radius: 50%;
      animation: pulse 4s ease-in-out infinite;
    }

    @keyframes pulse {
      0%, 100% { transform: scale(1); opacity: 0.5; }
      50% { transform: scale(1.2); opacity: 0.8; }
    }

    .image-wrapper {
      position: relative;
      z-index: 2;
      animation: floatImage 6s ease-in-out infinite;
    }

    @keyframes floatImage {
      0%, 100% { transform: translateY(0px); }
      50% { transform: translateY(-20px); }
    }

    .image-container img {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      border-radius: 20px;
      box-shadow: 
        0 30px 60px rgba(0, 0, 0, 0.3),
        0 0 0 1px rgba(255, 255, 255, 0.2) inset;
      filter: brightness(1.05) contrast(1.05);
    }

    /* Message styles */
    .message {
      margin-bottom: 28px;
      padding: 16px 20px;
      border-radius: 14px;
      display: none;
      font-size: 14px;
      font-weight: 600;
      animation: slideDown 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }

    @keyframes slideDown {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .message.error {
      display: flex;
      align-items: center;
      background: linear-gradient(135deg, #ffe6e6 0%, #ffcccc 100%);
      color: #cc0000;
      border: 2px solid #ff9999;
      box-shadow: 0 4px 12px rgba(204, 0, 0, 0.1);
    }

    .message.success {
      display: flex;
      align-items: center;
      background: linear-gradient(135deg, #e6f2ff 0%, #b3d9ff 100%);
      color: #007bff;
      border: 2px solid #66b3ff;
      box-shadow: 0 4px 12px rgba(0, 123, 255, 0.1);
    }

    .error-text {
      display: block;
      margin-top: 8px;
      font-size: 13px;
      color: #cc0000;
      font-weight: 600;
      min-height: 20px;
      padding-left: 4px;
    }

    .invalid {
      border-color: #ff4444 !important;
      background: #fff5f5 !important;
      animation: shake 0.4s ease-in-out;
    }

    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      25% { transform: translateX(-8px); }
      75% { transform: translateX(8px); }
    }

    .invalid:focus {
      box-shadow: 0 0 0 4px rgba(255, 68, 68, 0.15) !important;
    }

    /* Responsive Design */
    @media (max-width: 968px) {
      .signin-container {
        flex-direction: column;
      }

      .image-container {
        min-height: 350px;
        order: -1;
      }

      .form-container {
        padding: 50px 40px;
      }
    }

    @media (max-width: 480px) {
      body {
        padding: 10px;
      }

      .signin-container {
        border-radius: 20px;
      }

      .form-container {
        padding: 40px 24px;
      }

      .form-container h1 {
        font-size: 32px;
      }

      .logo {
        font-size: 24px;
      }
    }
  </style>
</head>

<body>
  <div class="orb orb-1"></div>
  <div class="orb orb-2"></div>

  <div class="signin-container">
    <div class="form-container">
      <div class="logo">CollabSync</div>
      <h1>Welcome Back</h1>
      <h2>Enter your credentials to access your account</h2>
      
      <form id="signinForm" action="/auth/signin" method="post">
        <div id="messageBox" class="message"></div>
        
        <div class="form-group">
          <label for="email">Email Address</label>
          <div class="input-wrapper">
            <input type="email" id="email" name="email" placeholder="you@example.com" required>
          </div>
          <small id="emailError" class="error-text" aria-live="polite"></small>
        </div>

        <div class="form-group">
          <label for="password">Password</label>
          <div class="input-wrapper">
            <input type="password" id="password" name="password" placeholder="Enter your password" required>
          </div>
          <small id="passwordError" class="error-text" aria-live="polite"></small>
        </div>

        <button id="submitBtn" type="submit">Sign In</button>
      </form>
    </div>
    
    <div class="image-container">
      <div class="image-wrapper">
        <img src="/Sign/SignUp_picture3.jpg" alt="Sign In Illustration">
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const form = document.getElementById('signinForm');
      const messageBox = document.getElementById('messageBox');
      const submitBtn = document.getElementById('submitBtn');
      const emailInput = document.getElementById('email');
      const passwordInput = document.getElementById('password');
      const emailError = document.getElementById('emailError');
      const passwordError = document.getElementById('passwordError');
      const forgotPasswordLink = document.getElementById('forgotPasswordLink');

      function showMessage(message, type) {
        messageBox.textContent = message;
        messageBox.className = `message ${type}`;
        messageBox.style.display = 'block';

        if (type === 'success') {
          setTimeout(() => {
            messageBox.style.display = 'none';
          }, 3000);
        }
      }

      function validateEmail(value) {
        const emailRegex = /^[\w.!#$%&'*+/=?^`{|}~-]+@[\w-]+(?:\.[\w-]+)+$/;
        if (!value) return 'Email is required';
        if (!emailRegex.test(value)) return 'Enter a valid email address';
        return '';
      }

      function validatePassword(value) {
        if (!value) return 'Password is required';
        if (value.length < 8) return 'Password must be at least 8 characters';
        if (!/[0-9]/.test(value)) return 'Password must include at least one digit';
        if (!/[^A-Za-z0-9]/.test(value)) return 'Password must include at least one special character';
        return '';
      }

      function setFieldState(inputEl, errorEl, errorMsg) {
        errorEl.textContent = errorMsg || '';
        if (errorMsg) {
          inputEl.classList.add('invalid');
          inputEl.setAttribute('aria-invalid', 'true');
          // Emphasize error visibility similar to profile page
          errorEl.style.display = 'block';
          errorEl.style.marginTop = '6px';
          errorEl.style.padding = '6px 8px';
          errorEl.style.borderRadius = '4px';
          errorEl.style.background = 'rgba(255, 77, 79, 0.12)';
          errorEl.style.border = '1px solid #ff4d4f';
          errorEl.style.color = '#b00020';
          inputEl.style.outline = '2px solid #ff4d4f';
          inputEl.style.outlineOffset = '1px';
        } else {
          inputEl.classList.remove('invalid');
          inputEl.removeAttribute('aria-invalid');
          errorEl.style.display = '';
          errorEl.style.padding = '';
          errorEl.style.border = '';
          errorEl.style.background = '';
          errorEl.style.color = '';
          errorEl.style.borderRadius = '';
          inputEl.style.outline = '';
          inputEl.style.outlineOffset = '';
        }
      }

      function updateSubmitState() {
        const emailMsg = validateEmail(emailInput.value.trim());
        const pwdMsg = validatePassword(passwordInput.value);
        submitBtn.disabled = Boolean(emailMsg || pwdMsg);
      }

      // Initial state
      updateSubmitState();

      // Live validation
      emailInput.addEventListener('input', () => {
        const msg = validateEmail(emailInput.value.trim());
        setFieldState(emailInput, emailError, msg);
        updateSubmitState();
      });
      emailInput.addEventListener('blur', () => {
        const msg = validateEmail(emailInput.value.trim());
        setFieldState(emailInput, emailError, msg);
        updateSubmitState();
      });

      passwordInput.addEventListener('input', () => {
        const msg = validatePassword(passwordInput.value);
        setFieldState(passwordInput, passwordError, msg);
        updateSubmitState();
      });
      passwordInput.addEventListener('blur', () => {
        const msg = validatePassword(passwordInput.value);
        setFieldState(passwordInput, passwordError, msg);
        updateSubmitState();
      });

      // ========================================
      // FUNCTIONALITY 1: USER AUTHENTICATION - SIGN IN
      // ========================================
      // Asynchronous user sign-in with form validation and redirect
      // - Validates form data client-side before submission
      // - Sends credentials to server via POST request
      // - Handles success/error responses asynchronously
      // - Redirects user on successful authentication
      // - Provides user feedback for all scenarios
      form.addEventListener('submit', async function (e) {
        e.preventDefault();

        // Final validation gate before submit
        const emailMsg = validateEmail(emailInput.value.trim());
        const pwdMsg = validatePassword(passwordInput.value);
        setFieldState(emailInput, emailError, emailMsg);
        setFieldState(passwordInput, passwordError, pwdMsg);
        if (emailMsg || pwdMsg) {
          showMessage(emailMsg || pwdMsg, 'error');
          updateSubmitState();
          return;
        }

        const formData = {
          email: document.getElementById('email').value.trim(),
          password: document.getElementById('password').value,
          // remember: document.getElementById('remember').checked
        };

        try {
          // Asynchronous authentication request
          const response = await fetch('/auth/signin', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
          });

          const data = await response.json();

          if (response.ok) {
            showMessage(data.message, 'success');
            // Redirect after successful authentication
            setTimeout(() => {
              window.location.href = data.redirectUrl;
            }, 1500);
          } else {
            showMessage(data.message || 'Invalid credentials', 'error');
          }
        } catch (error) {
          showMessage('An error occurred. Please try again.', 'error');
        }
      });

      // forgotPasswordLink.addEventListener('click', async function (e) {
      // e.preventDefault();
      //   const email = document.getElementById('email').value.trim();

      //   if (!email) {
      //     showMessage('Please enter your email address first.', 'error');
      //     return;
      //   }

      //   try {
      //     const response = await fetch('/auth/forgot-password', {
      //       method: 'POST',
      //       headers: {
      //         'Content-Type': 'application/json'
      //       },
      //       body: JSON.stringify({ email })
      //     });

      //     const data = await response.json();

      //     if (response.ok) {
      //       showMessage(data.message, 'success');
      //     } else {
      //       showMessage(data.message, 'error');
      //     }
      //   } catch (error) {
      //     showMessage('An error occurred. Please try again.', 'error');
      //   }
      // });
    });
  </script>
</body>

</html>