<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Influencer Dashboard - CollabSync</title>
  <link rel="stylesheet" href="/i_index/influencer_dashboard.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <!-- Add Bootstrap CSS and JS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Add menu functions before the body -->
  <script>
    // Sidebar toggle functions
    function openMenu() {
      document.getElementById("navMenu").style.width = "250px";
    }

    function closeMenu() {
      document.getElementById("navMenu").style.width = "0";
    }

    // Content Creation Functions
    function openContentCreationModal(campaignId, campaignTitle) {
      document.getElementById('campaignId').value = campaignId;
      document.querySelector('#contentCreationModal h2').innerHTML =
        '<i class="fas fa-video"></i> Create Content';
      document.getElementById('contentCreationModal').style.display = 'block';

      // Load campaign products
      loadCampaignProducts(campaignId);
    }

    function closeContentCreationModal() {
      document.getElementById('contentCreationModal').style.display = 'none';
      document.getElementById('contentCreationForm').reset();
    }

    function viewCampaignProducts(campaignId) {
      // Redirect to campaign products page
      window.location.href = `/influencer/campaigns/${campaignId}/products`;
    }

    function loadCampaignProducts(campaignId) {
      fetch(`/influencer/campaigns/${campaignId}/products`)
        .then(response => response.json())
        .then(data => {
          const productSelect = document.getElementById('campaignProduct');
          productSelect.innerHTML = '<option value="">Select a product to promote</option>';

          if (data.success && data.products) {
            data.products.forEach(product => {
              const option = document.createElement('option');
              option.value = product._id;
              option.textContent = `${product.name} - $${product.campaign_price}`;
              productSelect.appendChild(option);
            });
          }
        })
        .catch(error => {
          console.error('Error loading products:', error);
        });
    }

    // Function to check for approved content and alert influencer
    async function checkApprovedContent() {
      try {
        const response = await fetch('/influencer/content/approved');
        const data = await response.json();

        if (data.success && data.content && data.content.length > 0) {
          // Show alert for each approved content
          for (const content of data.content) {
            const campaignTitle = content.campaignTitle || 'Campaign';
            const brandName = content.brandName || 'the brand';
            const message = `Your content for "${campaignTitle}" has been approved by ${brandName}! You can now post it on social media.`;

            alert(message);

            // Update content status to published
            await updateContentStatus(content._id);
          }
        }
      } catch (error) {
        console.error('Error checking approved content:', error);
        // Don't show error to user as this is a background check
      }
    }

    // Function to update content status to published
    async function updateContentStatus(contentId) {
      try {
        const response = await fetch(`/influencer/content/${contentId}/publish`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            status: 'published'
          })
        });

        const data = await response.json();
        if (!data.success) {
          console.error('Failed to update content status:', data.message);
        }
      } catch (error) {
        console.error('Error updating content status:', error);
      }
    }

    // Handle content creation form submission - wait for DOM to be ready
    document.addEventListener('DOMContentLoaded', function () {
      // Check for approved content when dashboard loads
      checkApprovedContent();

      const contentForm = document.getElementById('contentCreationForm');
      if (contentForm) {
        contentForm.addEventListener('submit', function (e) {
          e.preventDefault();
          console.log('Form submission started');

          const form = document.getElementById('contentCreationForm');
          const formData = new FormData(form);

          // Add action type
          formData.append('action', 'submit_for_review');

          // Validate form before submission
          const requiredFields = ['campaignId', 'content_type', 'description', 'campaign_product'];
          const missingFields = [];

          for (const field of requiredFields) {
            if (!formData.get(field)) {
              missingFields.push(field);
            }
          }

          // Check if media files are selected
          const mediaFiles = form.querySelector('#contentMedia').files;
          console.log('Media files selected:', mediaFiles);
          console.log('Media files length:', mediaFiles ? mediaFiles.length : 0);
          if (!mediaFiles || mediaFiles.length === 0) {
            missingFields.push('media_files');
          }

          // Check if platforms are selected
          const platformCheckboxes = form.querySelectorAll('input[name="platforms"]:checked');
          if (platformCheckboxes.length === 0) {
            missingFields.push('platforms');
          }

          if (missingFields.length > 0) {
            alert('Please fill in all required fields: ' + missingFields.join(', '));
            return;
          }

          // Show loading state
          const submitBtn = form.querySelector('button[type="submit"]');
          const originalText = submitBtn.innerHTML;
          submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
          submitBtn.disabled = true;

          console.log('Submitting form data...');
          console.log('FormData contents:');
          for (let [key, value] of formData.entries()) {
            console.log(key, value);
          }

          fetch('/influencer/content/create', {
            method: 'POST',
            body: formData
          })
            .then(response => {
              console.log('Response received:', response.status);
              return response.json();
            })
            .then(data => {
              console.log('Response data:', data);
              if (data.success) {
                alert('Content submitted for review successfully!');
                closeContentCreationModal();
                location.reload();
              } else {
                alert('Error: ' + data.message);
              }
            })
            .catch(error => {
              console.error('Error:', error);
              alert('An error occurred while submitting content: ' + error.message);
            })
            .finally(() => {
              // Restore button state
              submitBtn.innerHTML = originalText;
              submitBtn.disabled = false;
            });
        });
      } else {
        console.warn('Content creation form not found');
      }
    });

    // Update the toggleRequests function
    function toggleRequests() {
      const requestsSection = document.getElementById('collaborationRequests');
      const viewRequestsBtn = document.querySelector('.view-requests-btn');

      if (requestsSection.style.display === 'none') {
        requestsSection.style.display = 'block';
        viewRequestsBtn.textContent = 'Hide Requests';
      } else {
        requestsSection.style.display = 'none';
        viewRequestsBtn.textContent = 'View Requests';
      }
    }
  </script>
</head>

<body>
  <!-- Header -->
  <header>
    <div class="header-container">
      <div class="logo">CollabSync</div>
      <nav>
        <ul>
          <li><a href="/influencer/home">Home</a></li>
          <li><a href="/influencer/explore">Explore Brands</a></li>
          <li><a href="/influencer/profile">My Profile</a></li>
        </ul>
      </nav>
    </div>
  </header>

  <!-- Sidebar Navigation (Right Side) -->
  <button class="toggle-btn" onclick="openMenu()">â˜°</button>
  <div class="menu" id="navMenu">
    <span class="close-btn" onclick="closeMenu()">&times;</span>
    <!-- <a href="#">Influencers</a> -->
    <a href="/influencer/collab">Collabs</a>
    <a href="/influencer/signout">Sign Out</a>
    <!-- <a href="#">Settings</a> -->
  </div>

  <!-- Main Content -->
  <div class="container">
    <!-- Intro Section -->
    <div class="intro">
      <h1>Welcome, <%= influencer.name %>
      </h1>
      <p>Discover how CollabSync empowers influencers with seamless brand collaborations.</p>

      <div class="performance-metrics">
        <div class="metric-item">
          <div class="metric-value">
            <%= influencer.avgEngagementRate %>%
          </div>
          <div class="metric-label">Avg Engagement Rate</div>
        </div>
        <div class="metric-item">
          <div class="metric-value">
            <%= influencer.totalAudience.toLocaleString() %>
          </div>
          <div class="metric-label">Total Audience</div>
        </div>
        <div class="metric-item">
          <div class="metric-value">$<%= influencer.monthlyEarnings.toLocaleString() %>
          </div>
          <div class="metric-label">Monthly Earnings</div>
        </div>
      </div>
    </div>

    <!-- Subscription Renewal Alert -->
    <% if (typeof subscriptionStatus !=='undefined' && subscriptionStatus && (subscriptionStatus.expired ||
      subscriptionStatus.needsRenewal)) { %>
      <div
        class="alert <%= subscriptionStatus.expired ? 'alert-danger' : 'alert-warning' %> alert-dismissible fade show"
        role="alert"
        style="margin: 20px 0; border-left: 4px solid <%= subscriptionStatus.expired ? '#ea4335' : '#ffc107' %>;">
        <h4 class="alert-heading">
          <i class="fas <%= subscriptionStatus.expired ? 'fa-exclamation-triangle' : 'fa-clock' %>"></i>
          <%= subscriptionStatus.expired ? 'Subscription Expired' : 'Subscription Renewal Required' %>
        </h4>
        <p>
          <%= subscriptionStatus.message %>
        </p>
        <% if (subscriptionStatus.expired) { %>
          <p><strong>You are now on the Free plan with limited features:</strong></p>
          <ul style="margin: 10px 0; padding-left: 20px;">
            <li>Maximum 2 brand collaborations</li>
            <li>Basic analytics only</li>
          </ul>
          <% } %>
            <hr>
            <a href="/subscription/manage" class="btn btn-primary">
              <i class="fas fa-credit-card"></i>
              <%= subscriptionStatus.expired ? 'Upgrade Now' : 'Renew Subscription' %>
            </a>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
      <% } %>

        <!-- Subscription Limits Section -->
        <% if (typeof subscriptionLimits !=='undefined' && subscriptionLimits) { %>
          <section class="dashboard">
            <h2 class="section-header">Your Plan Limits</h2>
            <div class="dashboard-container">

              <div class="dashboard-card">
                <h3>Current Plan</h3>
                <div class="metric-value">
                  <%= subscriptionStatus && subscriptionStatus.subscription && subscriptionStatus.subscription.planId ?
                    subscriptionStatus.subscription.planId.name : 'Free' %>
                </div>
                <div class="metric-label">Your subscription plan</div>
                <div class="trend-indicator trend-up">
                  <i class="fas fa-crown"></i>
                  <a href="/subscription/manage" style="color: inherit; text-decoration: none;">Manage Plan</a>
                </div>
              </div>
            </div>
          </section>
          <% } %>

            <!-- Dashboard Overview -->
            <section class="dashboard">
              <h2>Dashboard Overview</h2>
              <div class="dashboard-items">
                <div class="dashboard-item">
                  <h3>Active Collaborations</h3>
                  <p class="active-collabs-count">
                    <%= stats.activeCollaborations %>
                  </p>
                  <div class="progress-bar">
                    <div class="progress" style="--progress: <%= stats.completionPercentage %>%;"></div>
                  </div>
                  <small>
                    <%= stats.nearingCompletion %> nearing completion
                  </small>
                </div>
                <div class="dashboard-item">
                  <h3>Performance Score</h3>
                  <p class="performance-score">
                    <%= stats.performanceScore ? stats.performanceScore.toFixed(1) : '0.0' %>
                  </p>
                  <div class="rating-stars">
                    <% for(let i=0; i < 5; i++) { %>
                      <i class="fas fa-star <%= i < Math.floor(stats.avgRating || 0) ? 'active' : '' %>"></i>
                      <% } %>
                  </div>
                  <small>Average Rating: <%= stats.avgRating ? stats.avgRating.toFixed(1) : '0.0' %></small>
                </div>
                <div class="dashboard-item">
                  <h3>Earnings Overview</h3>
                  <p class="earnings-amount">$<%= stats.monthlyEarnings.toLocaleString() %>
                  </p>
                  <small class="<%= stats.earningsChange >= 0 ? 'positive' : 'negative' %>">
                    <%= stats.earningsChange>= 0 ? '+' : '' %><%= stats.earningsChange %>% from last month
                  </small>
                  <div class="total-earnings">
                    <span>Total Earnings:</span>
                    <span>$<%= stats.totalEarnings.toLocaleString() %></span>
                  </div>
                </div>
                <div class="dashboard-item">
                  <h3>Audience & Engagement</h3>
                  <p class="audience-count">
                    <%= stats.totalFollowers.toLocaleString() %>
                  </p>
                  <small>Total Followers</small>
                  <div class="engagement-rate">
                    <span>Avg. Engagement:</span>
                    <span>
                      <%= stats.avgEngagementRate %>%
                    </span>
                  </div>
                </div>
              </div>
            </section>

            <!-- Active Collaborations Section -->
            <section class="active-collaborations">
              <h2>Active Collaborations</h2>
              <div class="collaborations-grid">
                <% if (activeCollaborations && activeCollaborations.length> 0) { %>
                  <% activeCollaborations.forEach(collab=> { %>
                    <div class="collab-card" data-collab-id="<%= collab.id %>">
                      <div class="collab-header">
                        <img src="<%= collab.brand_logo %>" alt="<%= collab.brand_name %>" class="brand-logo">
                        <div class="collab-title">
                          <h3>
                            <%= collab.campaign_name %>
                          </h3>
                          <p class="brand-name">
                            <%= collab.brand_name %>
                          </p>
                        </div>
                      </div>

                      <div class="collab-progress">
                        <div class="progress-info">
                          <span>Progress</span>
                          <span>
                            <%= collab.progress %>%
                          </span>
                        </div>
                        <div class="progress-bar">
                          <div class="progress" style="--progress: <%= collab.progress %>%;"></div>
                        </div>
                      </div>

                      <div class="collab-metrics">
                        <div class="metric">
                          <span class="label">Duration</span>
                          <span class="value">
                            <%= collab.duration %> days
                          </span>
                        </div>
                        <div class="metric">
                          <span class="label">Budget</span>
                          <span class="value">$<%= collab.budget.toLocaleString() %></span>
                        </div>
                      </div>

                      <div class="collab-analytics">
                        <h4>Performance Analytics</h4>
                        <div class="analytics-grid">
                          <div class="analytics-item">
                            <span class="label">Reach</span>
                            <span class="value">
                              <%= collab.reach.toLocaleString() %>
                            </span>
                          </div>
                          <div class="analytics-item">
                            <span class="label">Clicks</span>
                            <span class="value">
                              <%= collab.clicks.toLocaleString() %>
                            </span>
                          </div>
                          <div class="analytics-item">
                            <span class="label">Conversions</span>
                            <span class="value">
                              <%= collab.conversions.toLocaleString() %>
                            </span>
                          </div>
                          <div class="analytics-item">
                            <span class="label">Performance Score</span>
                            <span class="value">
                              <%= collab.performance_score %>
                            </span>
                          </div>
                          <div class="analytics-item">
                            <span class="label">Engagement</span>
                            <span class="value">
                              <%= collab.engagement_rate %>
                            </span>
                          </div>
                          <div class="analytics-item">
                            <span class="label">Impressions</span>
                            <span class="value">
                              <%= collab.impressions %>
                            </span>
                          </div>
                          <div class="analytics-item">
                            <span class="label">Revenue</span>
                            <span class="value">
                              <%= collab.revenue %>
                            </span>
                          </div>
                          <div class="analytics-item">
                            <span class="label">ROI</span>
                            <span class="value">
                              <%= collab.roi %>
                            </span>
                          </div>
                          <div class="analytics-item">
                            <span class="label">Conversion Rate</span>
                            <span class="value">
                              <%= collab.engagement_rate %>%
                            </span>
                          </div>
                        </div>
                      </div>

                      <!-- ========================================
                SECTION 2: DYNAMIC REQUEST HANDLING & UI UPDATES
                ======================================== -->
                      <!-- This section manages collaboration request interactions:
                - Accepts/rejects requests via Fetch API calls
                - Updates UI state and button visibility dynamically
                - Shows/hides request cards based on user actions
                - Manages real-time status updates and page refreshes -->

                      <!-- Customer Shop URL Section -->
                      <div class="shop-url-section">
                        <div class="shop-url-header">
                          <i class="fas fa-shopping-cart"></i>
                          <span class="shop-url-label">Customer Shop Link</span>
                        </div>
                        <div class="shop-url-container">
                          <input type="text" class="shop-url-input" id="shopUrl_<%= collab.campaign_id %>"
                            value="<%= `${baseUrl}/customer/campaign/${collab.campaign_id}/shop` %>" readonly>
                          <button class="btn btn-copy" onclick="copyShopUrl('<%= collab.campaign_id %>')"
                            title="Copy to clipboard">
                            <i class="fas fa-copy"></i>
                          </button>
                        </div>
                        <div class="shop-url-note">
                          <i class="fas fa-info-circle"></i>
                          <span>Include this link in every post for this campaign</span>
                        </div>
                      </div>

                      <div class="collab-actions">
                        <button class="update-progress-btn" onclick="updateCollabProgress('<%= collab.id %>')">
                          <i class="fas fa-chart-line"></i>
                          Update Progress
                        </button>
                      </div>

                      <div class="post-content-label"
                        style="font-weight: bold; color: #2d6cdf; font-size: 1.08rem; margin-top: 18px; margin-bottom: 7px; display: flex; align-items: center;">
                        <i class="fas fa-edit" style="margin-top: 8px; color: #4683ea; font-size: 1.1em;"></i>
                        Post content for this campaign
                      </div>
                      <div class="collab-actions">
                        <button class="update-progress-btn"
                          onclick="openContentCreationModal('<%= collab.campaign_id %>', '<%= collab.campaign_title %>')">
                          <i class="fas fa-chart-line"></i> Create Content
                        </button>
                      </div>
                    </div>
                    <% }); %>
                      <% } else { %>
                        <div class="no-collaborations">
                          <p>No active collaborations at the moment</p>
                          <a href="/influencer/<%= influencer%>/explore" class="explore-btn">Explore Opportunities</a>
                        </div>
                        <% } %>
              </div>
            </section>

            <!-- Brand Invites Section -->
            <section class="brand-invites">
              <h2>Brand Invitations</h2>
              <div class="invites-grid">
                <% if (brandInvites && brandInvites.length> 0) { %>
                  <% brandInvites.forEach(invite=> { %>
                    <div class="invite-card">
                      <span class="invite-badge">New Invite</span>
                      <div class="invite-header">
                        <img src="<%= invite.brand_logo || '/images/default-brand.png' %>"
                          alt="<%= invite.brand_name %>" class="brand-logo">
                        <div class="invite-info">
                          <h3>
                            <%= invite.campaign_title %>
                          </h3>
                          <p class="brand-name">
                            <%= invite.brand_name %>
                          </p>
                          <% if (invite.brand_location) { %>
                            <p class="brand-location"><i class="fas fa-map-marker-alt"></i>
                              <%= invite.brand_location %>
                            </p>
                            <% } %>
                        </div>
                      </div>
                      <div class="invite-description">
                        <p>
                          <%= invite.campaign_description || 'No description provided' %>
                        </p>
                      </div>
                      <div class="invite-details">
                        <div class="detail-row">
                          <div class="detail-item">
                            <i class="fas fa-dollar-sign"></i>
                            <span class="label">Budget:</span>
                            <span class="value">$<%= (invite.campaign_budget || 0).toLocaleString() %></span>
                          </div>
                          <div class="detail-item">
                            <i class="fas fa-calendar-alt"></i>
                            <span class="label">Duration:</span>
                            <span class="value">
                              <%= invite.campaign_duration %> days
                            </span>
                          </div>
                        </div>
                        <% if (invite.campaign_id?.required_channels && invite.campaign_id.required_channels.length> 0)
                          { %>
                          <div class="detail-row">
                            <div class="detail-item full-width">
                              <i class="fas fa-share-alt"></i>
                              <span class="label">Required Channels:</span>
                              <div class="channel-badges">
                                <% invite.campaign_id.required_channels.forEach(channel=> { %>
                                  <span class="channel-badge">
                                    <%= channel %>
                                  </span>
                                  <% }); %>
                              </div>
                            </div>
                          </div>
                          <% } %>
                            <% if (invite.campaign_start_date && invite.campaign_end_date) { %>
                              <div class="detail-row">
                                <div class="detail-item">
                                  <i class="fas fa-calendar-check"></i>
                                  <span class="label">Start:</span>
                                  <span class="value">
                                    <%= new Date(invite.campaign_start_date).toLocaleDateString() %>
                                  </span>
                                </div>
                                <div class="detail-item">
                                  <i class="fas fa-calendar-times"></i>
                                  <span class="label">End:</span>
                                  <span class="value">
                                    <%= new Date(invite.campaign_end_date).toLocaleDateString() %>
                                  </span>
                                </div>
                              </div>
                              <% } %>
                      </div>
                      <div class="invite-actions">
                        <button class="btn-accept"
                          onclick="acceptBrandInvite('<%= invite._id %>', '<%= invite.campaign_title %>')">
                          <i class="fas fa-check"></i> Accept Invitation
                        </button>
                        <button class="btn-decline"
                          onclick="declineBrandInvite('<%= invite._id %>', '<%= invite.campaign_title %>')">
                          <i class="fas fa-times"></i> Decline
                        </button>
                      </div>
                    </div>
                    <% }); %>
                      <% } else { %>
                        <div class="no-invites">
                          <i class="fas fa-envelope-open"></i>
                          <h3>No Brand Invitations</h3>
                          <p>You don't have any brand invitations at the moment.</p>
                        </div>
                        <% } %>
              </div>
            </section>

            <!-- Sent Requests Section -->
            <section class="sent-requests">
              <h2>Sent Requests</h2>
              <div class="sent-requests-grid">
                <% if (sentRequests && sentRequests.length> 0) { %>
                  <% sentRequests.forEach(request=> { %>
                    <div class="sent-request-card">
                      <span class="sent-badge">Awaiting Response</span>
                      <div class="sent-request-header">
                        <img src="<%= request.brand_logo || '/images/default-brand.png' %>"
                          alt="<%= request.brand_name %>" class="brand-logo">
                        <div class="sent-request-info">
                          <h3>
                            <%= request.campaign_title %>
                          </h3>
                          <p class="brand-name">
                            <%= request.brand_name %>
                          </p>
                          <% if (request.brand_location) { %>
                            <p class="brand-location"><i class="fas fa-map-marker-alt"></i>
                              <%= request.brand_location %>
                            </p>
                            <% } %>
                        </div>
                      </div>
                      <div class="sent-request-description">
                        <p>
                          <%= request.campaign_description || 'No description provided' %>
                        </p>
                      </div>
                      <div class="sent-request-details">
                        <div class="detail-row">
                          <div class="detail-item">
                            <i class="fas fa-dollar-sign"></i>
                            <span class="label">Budget:</span>
                            <span class="value">$<%= (request.campaign_budget || 0).toLocaleString() %></span>
                          </div>
                          <div class="detail-item">
                            <i class="fas fa-calendar-alt"></i>
                            <span class="label">Duration:</span>
                            <span class="value">
                              <%= request.campaign_duration %> days
                            </span>
                          </div>
                        </div>
                        <% if (request.required_channels && request.required_channels.length> 0) { %>
                          <div class="detail-row">
                            <div class="detail-item full-width">
                              <i class="fas fa-share-alt"></i>
                              <span class="label">Required Channels:</span>
                              <div class="channel-badges">
                                <% request.required_channels.forEach(channel=> { %>
                                  <span class="channel-badge">
                                    <%= channel %>
                                  </span>
                                  <% }); %>
                              </div>
                            </div>
                          </div>
                          <% } %>
                            <% if (request.campaign_start_date && request.campaign_end_date) { %>
                              <div class="detail-row">
                                <div class="detail-item">
                                  <i class="fas fa-calendar-check"></i>
                                  <span class="label">Start:</span>
                                  <span class="value">
                                    <%= new Date(request.campaign_start_date).toLocaleDateString() %>
                                  </span>
                                </div>
                                <div class="detail-item">
                                  <i class="fas fa-calendar-times"></i>
                                  <span class="label">End:</span>
                                  <span class="value">
                                    <%= new Date(request.campaign_end_date).toLocaleDateString() %>
                                  </span>
                                </div>
                              </div>
                              <% } %>
                      </div>
                      <div class="sent-request-actions">
                        <button class="btn-cancel-request"
                          onclick="cancelSentRequest('<%= request._id %>', '<%= request.campaign_title %>')">
                          <i class="fas fa-times-circle"></i> Cancel Request
                        </button>
                      </div>
                    </div>
                    <% }); %>
                      <% } else { %>
                        <div class="no-sent-requests">
                          <i class="fas fa-paper-plane"></i>
                          <h3>No Sent Requests</h3>
                          <p>You haven't sent any collaboration requests yet. Explore campaigns to get started!</p>
                        </div>
                        <% } %>
              </div>
            </section>

            <!-- Recent Campaign History Section -->
            <section class="campaign-history-section" style="margin-top: 2rem;">
              <h2>Recent Campaign History</h2>
              <% if (recentCampaignHistory && recentCampaignHistory.length> 0) { %>
                <div class="campaigns-grid"
                  style="display:grid;grid-template-columns:repeat(auto-fill,minmax(320px,1fr));gap:20px;margin-top:10px;">
                  <% recentCampaignHistory.forEach(campaign=> { %>
                    <div class="campaign-card"
                      style="background:#fff;border-radius:10px;padding:16px;box-shadow:0 4px 6px rgba(0,0,0,0.08);position:relative;display:flex;flex-direction:column;gap:12px;">
                      <span class="campaign-status"
                        style="position:absolute;top:12px;right:12px;padding:4px 10px;border-radius:12px;font-size:12px;background:#e6f4ea;color:#34a853;">
                        <%= campaign.status %>
                      </span>
                      <div style="display:flex;align-items:center;gap:10px;">
                        <% if (campaign.brand_logo) { %>
                          <img src="<%= campaign.brand_logo %>" alt="<%= campaign.brand_name %>"
                            style="width:36px;height:36px;border-radius:50%;object-fit:cover;">
                          <% } %>
                            <div style="flex:1;min-width:0;">
                              <h3
                                style="margin:0;font-size:18px;color:#333;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;">
                                <%= campaign.title %>
                              </h3>
                              <% if (campaign.brand_name) { %>
                                <div
                                  style="font-size:12px;color:#6c757d;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;">
                                  <%= campaign.brand_name %>
                                </div>
                                <% } %>
                            </div>
                      </div>
                      <p style="margin:0;color:#666;">
                        <%= (campaign.description || '' ).substring(0, 120) %>...
                      </p>
                      <div class="campaign-metrics"
                        style="display:grid;grid-template-columns:repeat(3,1fr);gap:10px;margin:8px 0;padding:10px;background:#f8f9fa;border-radius:8px;">
                        <div class="metric" style="text-align:center;">
                          <div class="metric-value" style="font-weight:600;color:#4285f4;">
                            <%= campaign.performance_score.toFixed(1) %>
                          </div>
                          <div class="metric-label" style="font-size:12px;color:#666;">Performance</div>
                        </div>
                        <div class="metric" style="text-align:center;">
                          <div class="metric-value" style="font-weight:600;color:#4285f4;">
                            <%= campaign.engagement_rate.toFixed(1) %>%
                          </div>
                          <div class="metric-label" style="font-size:12px;color:#666;">Engagement</div>
                        </div>
                        <div class="metric" style="text-align:center;">
                          <div class="metric-value" style="font-weight:600;color:#4285f4;">
                            <%= campaign.reach.toLocaleString() %>
                          </div>
                          <div class="metric-label" style="font-size:12px;color:#666;">Reach</div>
                        </div>
                      </div>
                      <div class="campaign-details"
                        style="display:grid;grid-template-columns:repeat(3,1fr);gap:10px;padding-top:8px;border-top:1px solid #eee;">
                        <div class="detail-item"
                          style="display:flex;align-items:center;gap:6px;color:#666;font-size:12px;">
                          <i class="far fa-calendar" style="color:#4285f4;"></i>
                          <span>
                            <%= new Date(campaign.start_date || campaign.end_date).toLocaleDateString() %> - <%= new
                                Date(campaign.end_date).toLocaleDateString() %>
                          </span>
                        </div>
                        <div class="detail-item"
                          style="display:flex;align-items:center;gap:6px;color:#666;font-size:12px;">
                          <i class="fas fa-clock" style="color:#4285f4;"></i>
                          <span>
                            <%= campaign.duration || 0 %> days
                          </span>
                        </div>
                        <div class="detail-item"
                          style="display:flex;align-items:center;gap:6px;color:#666;font-size:12px;">
                          <i class="fas fa-tag" style="color:#4285f4;"></i>
                          <span>
                            <%= (campaign.budget || 0).toLocaleString() %> budget
                          </span>
                        </div>
                      </div>
                    </div>
                    <% }) %>
                </div>
                <% } %>
                  <div class="view-history" style="margin-top: 12px;">
                    <a href="/influencer/campaign-history" class="view-campaigns-btn"
                      style="display:inline-block;background:#007BFF;color:#fff;padding:8px 14px;border-radius:8px;text-decoration:none;">View
                      All Campaigns</a>
                  </div>
            </section>

            <!-- <div>Check out all your completed campaigns!</div>
    <a href="/influencer/campaign-history" class="view-campaigns-btn">View Completed Campaigns</a> -->
  </div>

  <!-- Add these modals before the closing body tag -->
  <!-- View Details Modal -->
  <div id="viewDetailsModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h2>Campaign Details</h2>
      <div id="campaignDetails" class="campaign-details">
        <!-- Content will be populated dynamically -->
      </div>
    </div>
  </div>

  <!-- ========================================
  SECTION 1: DYNAMIC MODAL SYSTEM & PROGRESS TRACKING
  ======================================== -->
  <!-- This section manages dynamic modals and progress updates:
  - Shows/hides modals for campaign details and progress updates
  - Updates progress sliders and values in real-time
  - Manages modal content population via Fetch API
  - Handles dynamic form interactions and data submission -->

  <!-- Update Progress Modal -->
  <!-- Content Creation Modal -->
  <div id="contentCreationModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h2><i class="fas fa-video"></i> Create Content</h2>
      <div class="modal-body">
        <form id="contentCreationForm" enctype="multipart/form-data">
          <input type="hidden" id="campaignId" name="campaignId">

          <div class="form-group">
            <label for="contentMedia">Post(Video/ Picture) <span class="required">*</span></label>
            <input type="file" id="contentMedia" name="media_files" class="form-control" multiple
              accept="image/*,video/*" required>
            <small class="form-text">Upload images or videos for your content</small>
          </div>

          <div class="form-group">
            <label for="contentDescription">Content Caption <span class="required">*</span></label>
            <textarea id="contentDescription" name="description" class="form-control"
              placeholder="Write your caption here..." rows="4" required></textarea>
          </div>

          <div class="form-group">
            <label for="contentType">Content Type <span class="required">*</span></label>
            <select id="contentType" name="content_type" class="form-control" required>
              <option value="">Select content type</option>
              <option value="post">Social Media Post</option>
              <option value="story">Story</option>
              <option value="reel">Reel/Video</option>
              <option value="review">Product Review</option>
              <option value="unboxing">Unboxing</option>
              <option value="tutorial">Tutorial</option>
            </select>
          </div>

          <div class="form-group">
            <label for="platforms">Platforms <span class="required">*</span></label>
            <div class="checkbox-group">
              <label class="checkbox-item">
                <input type="checkbox" name="platforms" value="instagram">
                <span class="checkmark"></span>
                Instagram
              </label>
              <label class="checkbox-item">
                <input type="checkbox" name="platforms" value="youtube">
                <span class="checkmark"></span>
                YouTube
              </label>
              <label class="checkbox-item">
                <input type="checkbox" name="platforms" value="tiktok">
                <span class="checkmark"></span>
                TikTok
              </label>
              <label class="checkbox-item">
                <input type="checkbox" name="platforms" value="facebook">
                <span class="checkmark"></span>
                Facebook
              </label>
            </div>
          </div>

          <div class="form-group">
            <label for="campaignProduct">Campaign Product <span class="required">*</span></label>
            <select id="campaignProduct" name="campaign_product" class="form-control" required>
              <option value="">Select a product to promote</option>
              <!-- Products will be populated dynamically -->
            </select>
          </div>

          <div class="form-group">
            <label for="specialInstructions">Special Instructions</label>
            <textarea id="specialInstructions" name="special_instructions" class="form-control"
              placeholder="Any special instructions or requirements" rows="3"></textarea>
          </div>

          <div class="form-group">
            <label for="publishDate">Planned Publish Date</label>
            <input type="datetime-local" id="publishDate" name="publish_date" class="form-control">
          </div>

          <div class="form-actions">
            <button type="button" class="btn btn-secondary" onclick="closeContentCreationModal()">
              Cancel
            </button>
            <button type="submit" class="btn btn-success">
              <i class="fas fa-paper-plane"></i> Submit for Review
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <div id="updateProgressModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h2>Update Progress & Metrics</h2>
      <p style="font-size: 0.9rem; color: #666; margin: 10px 0;">Note: Progress can only be increased, not decreased.
      </p>

      <form id="updateMetricsForm">
        <div class="progress-input">
          <label for="progressSlider">Campaign Progress:</label>
          <input type="range" id="progressSlider" min="0" max="100" value="0">
          <span id="progressValue">0%</span>
        </div>

        <div class="metrics-grid">
          <div class="metric-group">
            <label for="reachInput">Reach:</label>
            <input type="number" id="reachInput" name="reach" min="0" placeholder="0">
          </div>

          <div class="metric-group">
            <label for="clicksInput">Clicks:</label>
            <input type="number" id="clicksInput" name="clicks" min="0" placeholder="0">
          </div>

          <div class="metric-group">
            <label for="performanceScoreInput">Performance Score (%):</label>
            <input type="number" id="performanceScoreInput" name="performance_score" min="0" max="100" step="0.1"
              placeholder="0">
          </div>

          <div class="metric-group">
            <label for="conversionsInput">Conversions:</label>
            <input type="number" id="conversionsInput" name="conversions" min="0" placeholder="0">
          </div>

          <div class="metric-group">
            <label for="engagementRateInput">Engagement Rate (%):</label>
            <input type="number" id="engagementRateInput" name="engagement_rate" min="0" max="100" step="0.1"
              placeholder="0">
          </div>

          <div class="metric-group">
            <label for="impressionsInput">Impressions:</label>
            <input type="number" id="impressionsInput" name="impressions" min="0" placeholder="0">
          </div>

          <div class="metric-group">
            <label for="revenueInput">Revenue ($):</label>
            <input type="number" id="revenueInput" name="revenue" min="0" step="0.01" placeholder="0.00">
          </div>

          <div class="metric-group">
            <label for="roiInput">ROI (%):</label>
            <input type="number" id="roiInput" name="roi" min="0" step="0.1" placeholder="0">
          </div>
        </div>

        <div class="form-actions">
          <button type="button" class="btn-secondary" onclick="closeUpdateProgressModal()">Cancel</button>
          <button type="submit" class="btn-primary">Save Progress & Metrics</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    // ========================================
    // FUNCTIONALITY 3: COLLABORATION REQUEST HANDLING
    // ========================================
    // Asynchronous collaboration request acceptance
    // - Sends acceptance request to server via POST
    // - Handles success/error responses with Promise chains
    // - Refreshes page on successful acceptance
    // - Provides user feedback for all scenarios
    // - Manages UI state updates after request processing
    function acceptRequest(requestId) {
      // Implement accept request functionality
      fetch(`/influencer/requests/${requestId}/accept`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Refresh the page or update the UI
            location.reload();
          } else {
            alert('Failed to accept request: ' + data.message);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred while accepting the request');
        });
    }

    let currentCollabId = null;
    const viewDetailsModal = document.getElementById('viewDetailsModal');
    const updateProgressModal = document.getElementById('updateProgressModal');
    const updateMetricsForm = document.getElementById('updateMetricsForm');
    const closeButtons = document.getElementsByClassName('close');
    const progressSlider = document.getElementById('progressSlider');
    const progressValue = document.getElementById('progressValue');
    const saveProgressBtn = document.getElementById('saveProgress');

    // Input elements for metrics
    const reachInput = document.getElementById('reachInput');
    const clicksInput = document.getElementById('clicksInput');
    const performanceScoreInput = document.getElementById('performanceScoreInput');
    const conversionsInput = document.getElementById('conversionsInput');
    const engagementRateInput = document.getElementById('engagementRateInput');
    const impressionsInput = document.getElementById('impressionsInput');
    const revenueInput = document.getElementById('revenueInput');
    const roiInput = document.getElementById('roiInput');

    // Close modals when clicking X
    Array.from(closeButtons).forEach(button => {
      button.onclick = function () {
        viewDetailsModal.style.display = 'none';
        updateProgressModal.style.display = 'none';
      }
    });

    // Close modals when clicking outside
    window.onclick = function (event) {
      if (event.target == viewDetailsModal) {
        viewDetailsModal.style.display = 'none';
      }
      if (event.target == updateProgressModal) {
        updateProgressModal.style.display = 'none';
      }
    }

    // Function to close update progress modal
    window.closeUpdateProgressModal = function () {
      updateProgressModal.style.display = 'none';
    }

    // Update progress value display when slider changes
    if (progressSlider) {
      progressSlider.addEventListener('input', function () {
        progressValue.textContent = this.value + '%';
      });
    }

    // ========================================
    // FUNCTIONALITY 3: COLLABORATION DETAILS RETRIEVAL
    // ========================================
    // Asynchronous collaboration details retrieval with dynamic modal population
    // - Fetches collaboration details from server via GET request
    // - Handles network errors and response validation
    // - Dynamically builds HTML content using template literals
    // - Populates modal with fetched collaboration data
    // - Manages modal state and content updates
    function viewCollabDetails(collabId) {
      currentCollabId = collabId;
      fetch(`/influencer/collab/${collabId}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          if (data.success) {
            const details = data.collab;
            const detailsHtml = `
              <div class="campaign-info">
                <div class="campaign-header">
                  <img src="${details.brand_logo}" alt="${details.brand_name}" class="brand-logo">
                  <h3>${details.campaign_name}</h3>
                  <p class="brand-name">${details.brand_name}</p>
                </div>
                <div class="campaign-metrics">
                  <div class="metric">
                    <span class="label">Progress:</span>
                    <span class="value">${details.progress}%</span>
                  </div>
                  <div class="metric">
                    <span class="label">Duration:</span>
                    <span class="value">${details.duration} days</span>
                  </div>
                  <div class="metric">
                    <span class="label">Budget:</span>
                    <span class="value">$${details.budget.toLocaleString()}</span>
                  </div>
                  <div class="metric">
                    <span class="label">Engagement Rate:</span>
                    <span class="value">${details.engagement_rate}%</span>
                  </div>
                </div>
                <div class="campaign-description">
                  <h4>Description</h4>
                  <p>${details.description}</p>
                </div>
                <div class="campaign-dates">
                  <div class="date">
                    <span class="label">Start Date:</span>
                    <span class="value">${new Date(details.start_date).toLocaleDateString()}</span>
                  </div>
                  <div class="date">
                    <span class="label">End Date:</span>
                    <span class="value">${new Date(details.end_date).toLocaleDateString()}</span>
                  </div>
                </div>
                ${details.status === 'active' ? `
                <div class="campaign-purchase-link" style="margin: 12px 0;">
                  <a href="/customer/campaign/${details.campaign_id || details._id}/shop" target="_blank" rel="noopener noreferrer"
                     style="display:inline-block;background:#0d6efd;color:#fff;padding:8px 14px;border-radius:8px;text-decoration:none;">
                    <i class="fas fa-link" style="margin-right:6px;"></i>Open Purchase Page
                  </a>
                  <div style="font-size:12px;color:#6c757d;margin-top:6px;">This link is available only while the campaign is active.</div>
                </div>
                ` : ''}
                <div class="campaign-performance">
                  <h4>Performance Metrics</h4>
                  <div class="metrics-grid">
                    <div class="metric">
                      <span class="label">Performance Score:</span>
                      <span class="value">${details.performance_score || 0}%</span>
                    </div>
                    <div class="metric">
                      <span class="label">Reach:</span>
                      <span class="value">${details.reach.toLocaleString()}</span>
                    </div>
                    <div class="metric">
                      <span class="label">Clicks:</span>
                      <span class="value">${details.clicks.toLocaleString()}</span>
                    </div>
                    <div class="metric">
                      <span class="label">Conversions:</span>
                      <span class="value">${details.conversions.toLocaleString()}</span>
                    </div>
                  </div>
                </div>
                ${details.deliverables && details.deliverables.length > 0 ? `
                  <div class="campaign-deliverables">
                    <h4>Deliverables</h4>
                    <div class="deliverables-list">
                      ${details.deliverables.map(deliverable => `
                        <div class="deliverable-item">
                          <h5>${deliverable.title || 'Untitled Deliverable'}</h5>
                          <p>${deliverable.description || 'No description available'}</p>
                          <div class="deliverable-status">
                            <span class="status-badge ${deliverable.status || 'pending'}">${deliverable.status || 'pending'}</span>
                            <span class="due-date">Due: ${new Date(deliverable.due_date).toLocaleDateString()}</span>
                          </div>
                        </div>
                      `).join('')}
                    </div>
                  </div>
                ` : ''}
              </div>
            `;
            document.getElementById('campaignDetails').innerHTML = detailsHtml;
            viewDetailsModal.style.display = 'block';
          } else {
            throw new Error(data.message || 'Failed to load campaign details');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error loading campaign details: ' + error.message);
        });
    }

    // ========================================
    // FUNCTIONALITY 4: PROGRESS & METRICS UPDATE SYSTEM
    // ========================================

    // Update Progress & Prefill Metrics
    function updateCollabProgress(collabId) {
      currentCollabId = collabId;
      const collabCard = document.querySelector(`[data-collab-id="${collabId}"]`);
      if (!collabCard) {
        console.error('Collaboration card not found');
        return;
      }

      const progressText = collabCard.querySelector('.progress-info span:last-child');
      const currentProgress = parseInt(progressText.textContent) || 0;

      // Set minimum value to prevent decrementing below current progress
      progressSlider.min = currentProgress;
      progressSlider.value = currentProgress;
      progressValue.textContent = `${currentProgress}%`;

      // Fetch current metrics and pre-fill inputs
      fetch(`/influencer/collab/${collabId}/details`)
        .then(response => {
          if (!response.ok) throw new Error('Network response was not ok');
          return response.json();
        })
        .then(data => {
          if (data.success) {
            const details = data.collab;
            reachInput.value = details.reach || 0;
            clicksInput.value = details.clicks || 0;
            performanceScoreInput.value = details.performance_score || 0;
            conversionsInput.value = details.conversions || 0;
            engagementRateInput.value = details.engagement_rate || 0;
            impressionsInput.value = details.impressions || 0;
            revenueInput.value = details.revenue || 0;
            roiInput.value = details.roi || 0;
          } else {
            reachInput.value = 0;
            clicksInput.value = 0;
            performanceScoreInput.value = 0;
            conversionsInput.value = 0;
            engagementRateInput.value = 0;
            impressionsInput.value = 0;
            revenueInput.value = 0;
            roiInput.value = 0;
          }
          updateProgressModal.style.display = 'block';
        })
        .catch(error => {
          console.error('Error fetching collab details:', error);
          reachInput.value = 0;
          clicksInput.value = 0;
          performanceScoreInput.value = 0;
          conversionsInput.value = 0;
          engagementRateInput.value = 0;
          impressionsInput.value = 0;
          revenueInput.value = 0;
          roiInput.value = 0;
          updateProgressModal.style.display = 'block';
        });
    }

    // Save Progress & Metrics
    updateMetricsForm.onsubmit = async function (event) {
      event.preventDefault();

      // Validate percentage fields (0â€“100)
      const percentageFields = [
        { name: 'Performance Score', value: parseFloat(performanceScoreInput.value) },
        { name: 'Engagement Rate', value: parseFloat(engagementRateInput.value) }
      ];
      for (const field of percentageFields) {
        if (field.value < 0 || field.value > 100) {
          alert(`${field.name} must be between 0 and 100.`);
          return;
        }
      }

      // Validate ROI
      if (parseFloat(roiInput.value) < 0) {
        alert('ROI must be 0 or greater.');
        return;
      }

      if (!currentCollabId) {
        console.error('No collaboration ID selected');
        return;
      }

      try {
        const response = await fetch(`/influencer/collab/${currentCollabId}/update-progress`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            progress: parseInt(progressSlider.value),
            reach: parseInt(reachInput.value),
            clicks: parseInt(clicksInput.value),
            performance_score: parseFloat(performanceScoreInput.value),
            conversions: parseInt(conversionsInput.value),
            engagement_rate: parseFloat(engagementRateInput.value),
            impressions: parseInt(impressionsInput.value),
            revenue: parseFloat(revenueInput.value),
            roi: parseFloat(roiInput.value)
          })
        });

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({ message: 'Unknown error occurred' }));
          alert('Failed to update progress: ' + errorData.message);
          return;
        }

        const data = await response.json();

        if (data.success) {
          // Fetch updated details and refresh UI
          fetch(`/influencer/collab/${currentCollabId}/details`)
            .then(response => response.json())
            .then(updateData => {
              if (updateData.success) {
                const details = updateData.collab;
                const collabCard = document.querySelector(`[data-collab-id="${currentCollabId}"]`);
                if (collabCard) {
                  const progressBar = collabCard.querySelector('.progress');
                  const progressText = collabCard.querySelector('.progress-info span:last-child');
                  const reachValue = collabCard.querySelector('.analytics-row:nth-child(1) .analytics-item:nth-child(1) .value');
                  const clicksValue = collabCard.querySelector('.analytics-row:nth-child(1) .analytics-item:nth-child(2) .value');
                  const conversionsValue = collabCard.querySelector('.analytics-row:nth-child(1) .analytics-item:nth-child(3) .value');
                  const performanceScoreValue = collabCard.querySelector('.analytics-row:nth-child(2) .analytics-item:nth-child(1) .value');
                  const engagementRateValue = collabCard.querySelector('.analytics-row:nth-child(2) .analytics-item:nth-child(2) .value');
                  const impressionsValue = collabCard.querySelector('.analytics-row:nth-child(3) .analytics-item:nth-child(1) .value');
                  const revenueValue = collabCard.querySelector('.analytics-row:nth-child(3) .analytics-item:nth-child(2) .value');
                  const roiValue = collabCard.querySelector('.analytics-row:nth-child(3) .analytics-item:nth-child(3) .value');

                  if (progressBar && progressText) {
                    progressBar.style.width = `${details.progress || 0}%`;
                    progressText.textContent = `${details.progress || 0}%`;
                  }
                  if (reachValue) reachValue.textContent = (details.reach || 0).toLocaleString();
                  if (clicksValue) clicksValue.textContent = (details.clicks || 0).toLocaleString();
                  if (conversionsValue) conversionsValue.textContent = (details.conversions || 0).toLocaleString();
                  if (performanceScoreValue) performanceScoreValue.textContent = (details.performance_score || 0) + '%';
                  if (engagementRateValue) engagementRateValue.textContent = (details.engagement_rate || 0) + '%';
                  if (impressionsValue) impressionsValue.textContent = (details.impressions || 0).toLocaleString();
                  if (revenueValue) revenueValue.textContent = '$' + (details.revenue || 0).toLocaleString();
                  if (roiValue) roiValue.textContent = (details.roi || 0) + '%';
                }
              }
            })
            .catch(error => {
              console.error('Error fetching updated data:', error);
            });

          // Close modal and show success message
          updateProgressModal.style.display = 'none';
          alert('Progress and metrics updated successfully!');
        } else {
          alert('Failed to update progress: ' + data.message);
        }
      } catch (error) {
        console.error('Error updating progress:', error);
        alert('An error occurred while updating progress');
      }
    };

    // Update progress value live display (with validation)
    progressSlider.oninput = function () {
      const minValue = parseInt(this.min) || 0;
      const currentValue = parseInt(this.value);

      if (currentValue < minValue) {
        this.value = minValue;
      }

      progressValue.textContent = `${this.value}%`;
    };

    function cancelRequest(requestId) {
      if (confirm('Are you sure you want to cancel this request?')) {
        fetch(`/influencer/requests/${requestId}/cancel`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              location.reload();
            } else {
              alert('Failed to cancel request: ' + data.message);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while cancelling the request');
          });
      }
    }

    // Accept brand invite
    async function acceptBrandInvite(inviteId, campaignTitle) {
      if (!confirm(`Accept invitation for "${campaignTitle}"?`)) {
        return;
      }

      try {
        const response = await fetch(`/influencer/brand-invites/${inviteId}/accept`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const data = await response.json();

        if (data.success) {
          alert('Invitation accepted successfully!');
          window.location.reload();
        } else {
          alert('Failed to accept invitation: ' + (data.message || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error accepting invite:', error);
        alert('An error occurred while accepting the invitation. Please try again.');
      }
    }

    // Decline brand invite
    async function declineBrandInvite(inviteId, campaignTitle) {
      if (!confirm(`Decline invitation for "${campaignTitle}"?\n\nThis action cannot be undone.`)) {
        return;
      }

      try {
        const response = await fetch(`/influencer/brand-invites/${inviteId}/decline`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const data = await response.json();

        if (data.success) {
          alert('Invitation declined.');
          window.location.reload();
        } else {
          alert('Failed to decline invitation: ' + (data.message || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error declining invite:', error);
        alert('An error occurred while declining the invitation. Please try again.');
      }
    }

    // Cancel sent request
    async function cancelSentRequest(requestId, campaignTitle) {
      if (!confirm(`Cancel your request for "${campaignTitle}"?\n\nThis action cannot be undone.`)) {
        return;
      }

      try {
        const response = await fetch(`/influencer/sent-requests/${requestId}/cancel`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const data = await response.json();

        if (data.success) {
          alert('Request cancelled successfully.');
          window.location.reload();
        } else {
          alert('Failed to cancel request: ' + (data.message || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error cancelling request:', error);
        alert('An error occurred while cancelling the request. Please try again.');
      }
    }

    // Copy shop URL to clipboard
    async function copyShopUrl(campaignId) {
      const urlInput = document.getElementById(`shopUrl_${campaignId}`);

      try {
        await navigator.clipboard.writeText(urlInput.value);

        // Show success feedback
        const copyBtn = urlInput.nextElementSibling;
        const originalIcon = copyBtn.innerHTML;
        copyBtn.innerHTML = '<i class="fas fa-check"></i>';
        copyBtn.style.backgroundColor = '#28a745';

        // Reset after 2 seconds
        setTimeout(() => {
          copyBtn.innerHTML = originalIcon;
          copyBtn.style.backgroundColor = '';
        }, 2000);

      } catch (error) {
        console.error('Failed to copy URL:', error);

        // Fallback for older browsers
        urlInput.select();
        urlInput.setSelectionRange(0, 99999);
        document.execCommand('copy');

        alert('Shop URL copied to clipboard!');
      }
    }
  </script>
</body>

</html>